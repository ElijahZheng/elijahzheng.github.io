<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Elijah Zheng&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  <link href="content" rel="hub"/>
  <link href="blog.zhengxiangling.com/"/>
  <updated>2019-11-18T01:27:57.899Z</updated>
  <id>blog.zhengxiangling.com/</id>
  
  <author>
    <name>Elijah Zheng</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>beautifulSoup爬取同步加载页面数据</title>
    <link href="blog.zhengxiangling.com/2019/11/15/beautifulSoup%E7%88%AC%E5%8F%96%E5%90%8C%E6%AD%A5%E5%8A%A0%E8%BD%BD%E9%A1%B5%E9%9D%A2%E6%95%B0%E6%8D%AE/"/>
    <id>blog.zhengxiangling.com/2019/11/15/beautifulSoup爬取同步加载页面数据/</id>
    <published>2019-11-15T03:00:00.000Z</published>
    <updated>2019-11-18T01:27:57.899Z</updated>
    
    <content type="html"><![CDATA[<p>beautifulSoup 可以很方便的获取 html 页面的标签节点，而且也很容易获取到标签的属性和文本内容。我们就运用 beautifulSoup 来爬取同步加载页面数据，然后我们将获取到的数据存入到 excel 中。</p><a id="more"></a><h2 id="爬取同步加载页面数据"><a href="#爬取同步加载页面数据" class="headerlink" title="爬取同步加载页面数据"></a>爬取同步加载页面数据</h2><p>我们这里爬取豆瓣电影Top 250 的数据做描述，<code>request</code>库请求页面，<code>beautifulSoup</code>用来获取页面节点，所使用到的库自行安装。</p><h3 id="获取页面源码"><a href="#获取页面源码" class="headerlink" title="获取页面源码"></a>获取页面源码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">from urllib import request</span><br><span class="line">from chardet import detect</span><br><span class="line">from bs4 import BeautifulSoup</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def get_soup(page_url):</span><br><span class="line">    &quot;&quot;&quot;获取源码&quot;&quot;&quot;</span><br><span class="line">    with request.urlopen(page_url) as fp:</span><br><span class="line">        byt = fp.read()</span><br><span class="line">        det = detect(byt)</span><br><span class="line">        return BeautifulSoup(byt.decode(det[&apos;encoding&apos;]), &apos;lxml&apos;)</span><br></pre></td></tr></table></figure><p><code>page_url</code>为页面地址，<code>lxml</code>为<code>python</code>库自行安装。</p><h3 id="获取页面数据"><a href="#获取页面数据" class="headerlink" title="获取页面数据"></a>获取页面数据</h3><p>我们运用<code>beautifulSoup</code>来获取页面的数据，数据一般存放在页面的节点内容中（如：标题、价格、数量）和节点的属性中（图片链接），所以我们需要找到这些存放数据的相应节点。</p><p><img src="https://cdn.zhengxiangling.com/superbed/2019/11/15/5dce0edf8e0e2e3ee92f82d9.jpg" alt="douban电影top250数据节点"></p><p>我们需要从中找到一些规律，每部电影的数据都存放在一个<code>li</code>中，所有的<code>li</code>都存放在一个<code>ol</code>中，图片的链接在<code>li</code>的<code>img</code>标签的<code>src</code>属性中，其他的数据都放在带有<code>class</code>属性的<code>span</code>标签中。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"># 正则式</span><br><span class="line">import re</span><br><span class="line"></span><br><span class="line">def get_data(page):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    获取数据</span><br><span class="line">    selelct 可以用css语法获取标签，find可以获取标签里的 attrs 属性值</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    data = []</span><br><span class="line">    ol = page.find(&apos;ol&apos;, attrs=&#123;&apos;class&apos;: &apos;grid_view&apos;&#125;)</span><br><span class="line">    for li in ol.select(&apos;li&apos;):</span><br><span class="line">        # 单元</span><br><span class="line">        tmp = []</span><br><span class="line">        # 多个 title</span><br><span class="line">        titles = []</span><br><span class="line">        img_url = li.find(&apos;img&apos;).attrs[&apos;src&apos;].strip()</span><br><span class="line">        tmp.append(img_url)</span><br><span class="line">        for span in li.findAll(&apos;span&apos;, attrs=&#123;&quot;class&quot;: re.compile(&apos;&apos;)&#125;):</span><br><span class="line">            if span.attrs[&apos;class&apos;][0] == &apos;title&apos;:</span><br><span class="line">                titles.append(span.string.strip())</span><br><span class="line">            # 评价</span><br><span class="line">            if span.attrs[&apos;class&apos;][0] == &apos;rating_num&apos;:</span><br><span class="line">                tmp.append(span.string.strip())</span><br><span class="line">            # 简评</span><br><span class="line">            if span.attrs[&apos;class&apos;][0] == &apos;inq&apos;:</span><br><span class="line">                tmp.append(span.string.strip())</span><br><span class="line">        tmp.insert(0, titles)</span><br><span class="line">        data.append(tmp)</span><br><span class="line">    return data</span><br></pre></td></tr></table></figure><h3 id="获取下一页的数据"><a href="#获取下一页的数据" class="headerlink" title="获取下一页的数据"></a>获取下一页的数据</h3><p>我们先需要在页面中找到下一页数据请求的参数<br><img src="https://cdn.zhengxiangling.com/superbed/2019/11/15/5dce1b588e0e2e3ee931cd7c.jpg" alt="下一页按钮"><br>我们可以看到下一页的参数为<code>?start=25&amp;filter=</code>，所以获取到这个参数然后加入到之前的网址当中，获取到的数据就是下一页的数据了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">def next_url(page):</span><br><span class="line">    &quot;&quot;&quot;获取下一页链接后缀&quot;&quot;&quot;</span><br><span class="line">    a = page.find(&apos;a&apos;, text=re.compile(&quot;^后页&quot;))</span><br><span class="line">    if a:</span><br><span class="line">        return a.attrs[&apos;href&apos;]</span><br><span class="line">    else:</span><br><span class="line">        return None</span><br></pre></td></tr></table></figure><h3 id="保存数据到-excel-中"><a href="#保存数据到-excel-中" class="headerlink" title="保存数据到 excel 中"></a>保存数据到 excel 中</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import xlwt</span><br><span class="line"></span><br><span class="line">def xls_save(workbook, data, count):</span><br><span class="line">    &quot;&quot;&quot;保存数据到excel&quot;&quot;&quot;</span><br><span class="line">    for d in data:</span><br><span class="line">        for i in range(len(d)):</span><br><span class="line">            # print(d[i])</span><br><span class="line">            workbook.write(count, i, d[i])</span><br><span class="line">        count = count + 1</span><br><span class="line">    return workbook, count</span><br></pre></td></tr></table></figure><p><code>xlwt</code>为<code>python</code>库自行安装，<code>workbook</code>为要保存的<code>excel</code>对象，<code>data</code>为<code>beautifulSoup</code>对象，<code>count</code>为要写入数据的行数。</p><h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"># 爬取豆瓣电影 top250</span><br><span class="line"></span><br><span class="line">from urllib import request</span><br><span class="line">from chardet import detect</span><br><span class="line">from bs4 import BeautifulSoup</span><br><span class="line">import re</span><br><span class="line">import xlwt</span><br><span class="line">import os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def get_soup(page_url):</span><br><span class="line">    &quot;&quot;&quot;获取源码&quot;&quot;&quot;</span><br><span class="line">    with request.urlopen(page_url) as fp:</span><br><span class="line">        byt = fp.read()</span><br><span class="line">        det = detect(byt)</span><br><span class="line">        return BeautifulSoup(byt.decode(det[&apos;encoding&apos;]), &apos;lxml&apos;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def get_data(page):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    获取数据</span><br><span class="line">    selelct 可以用css语法获取标签，find可以获取标签里的 attrs 属性值</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    data = []</span><br><span class="line">    ol = page.find(&apos;ol&apos;, attrs=&#123;&apos;class&apos;: &apos;grid_view&apos;&#125;)</span><br><span class="line">    for li in ol.select(&apos;li&apos;):</span><br><span class="line">        # 单元</span><br><span class="line">        tmp = []</span><br><span class="line">        # 多个 title</span><br><span class="line">        titles = []</span><br><span class="line">        img_url = li.find(&apos;img&apos;).attrs[&apos;src&apos;].strip()</span><br><span class="line">        tmp.append(img_url)</span><br><span class="line">        for span in li.findAll(&apos;span&apos;, attrs=&#123;&quot;class&quot;: re.compile(&apos;&apos;)&#125;):</span><br><span class="line">            if span.attrs[&apos;class&apos;][0] == &apos;title&apos;:</span><br><span class="line">                titles.append(span.string.strip())</span><br><span class="line">            if span.attrs[&apos;class&apos;][0] == &apos;rating_num&apos;:</span><br><span class="line">                tmp.append(span.string.strip())</span><br><span class="line">            if span.attrs[&apos;class&apos;][0] == &apos;inq&apos;:</span><br><span class="line">                tmp.append(span.string.strip())</span><br><span class="line">        tmp.insert(0, titles)</span><br><span class="line">        data.append(tmp)</span><br><span class="line">    return data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def next_url(page):</span><br><span class="line">    &quot;&quot;&quot;获取下一页链接后缀&quot;&quot;&quot;</span><br><span class="line">    a = page.find(&apos;a&apos;, text=re.compile(&quot;^后页&quot;))</span><br><span class="line">    if a:</span><br><span class="line">        return a.attrs[&apos;href&apos;]</span><br><span class="line">    else:</span><br><span class="line">        return None</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def xls_save(workbook, data, count):</span><br><span class="line">    &quot;&quot;&quot;保存数据到excel&quot;&quot;&quot;</span><br><span class="line">    for d in data:</span><br><span class="line">        for i in range(len(d)):</span><br><span class="line">            # print(d[i])</span><br><span class="line">            workbook.write(count, i, d[i])</span><br><span class="line">        count = count + 1</span><br><span class="line">    return workbook, count</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    url = &apos;https://movie.douban.com/top250&apos;</span><br><span class="line">    soup = get_soup(url)</span><br><span class="line">    # print(get_data(soup))</span><br><span class="line">    path = os.path.join(os.getcwd() + &quot;\\&quot; + &quot;douban-top250.xls&quot;)</span><br><span class="line">    xls_file = os.path.exists(path)</span><br><span class="line">    if xls_file:</span><br><span class="line">        os.remove(path)</span><br><span class="line">    wb = xlwt.Workbook(encoding=&apos;utf-8&apos;)</span><br><span class="line">    xls = wb.add_sheet(&apos;top250&apos;)</span><br><span class="line">    head = [&apos;标题&apos;, &apos;图片地址&apos;, &apos;评分&apos;, &apos;简评&apos;]  # 表头</span><br><span class="line">    row = 1</span><br><span class="line">    for h in range(len(head)):</span><br><span class="line">        xls.write(0, h, head[h])</span><br><span class="line">    xls, row = xls_save(xls, get_data(soup), 1)</span><br><span class="line">    nxt = next_url(soup)</span><br><span class="line">    while nxt:</span><br><span class="line">        soup = get_soup(url + nxt)</span><br><span class="line">        xls, row = xls_save(xls, get_data(soup), row)</span><br><span class="line">        nxt = next_url(soup)</span><br><span class="line">    wb.save(&apos;douban-top250.xls&apos;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;beautifulSoup 可以很方便的获取 html 页面的标签节点，而且也很容易获取到标签的属性和文本内容。我们就运用 beautifulSoup 来爬取同步加载页面数据，然后我们将获取到的数据存入到 excel 中。&lt;/p&gt;
    
    </summary>
    
    
      <category term="爬虫" scheme="blog.zhengxiangling.com/categories/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="beautifulSoup" scheme="blog.zhengxiangling.com/tags/beautifulSoup/"/>
    
      <category term="python" scheme="blog.zhengxiangling.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>区块链技术及应用现状</title>
    <link href="blog.zhengxiangling.com/2019/11/06/%E5%8C%BA%E5%9D%97%E9%93%BE%E6%8A%80%E6%9C%AF%E5%8F%8A%E5%BA%94%E7%94%A8%E7%8E%B0%E7%8A%B6-1/"/>
    <id>blog.zhengxiangling.com/2019/11/06/区块链技术及应用现状-1/</id>
    <published>2019-11-06T02:52:00.000Z</published>
    <updated>2019-11-15T02:05:47.727Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>from 陈纯院士的讲座</p></blockquote><h2 id="区块链本质"><a href="#区块链本质" class="headerlink" title="区块链本质"></a>区块链本质</h2><h3 id="术语解释"><a href="#术语解释" class="headerlink" title="术语解释"></a>术语解释</h3><p>交易：交易指的是一次对账本的操作，如一笔转账交易。</p><p>区块：将一段时间内发生的所有交易和状态打包成为一个区块。</p><p>块链式数据结构（狭义区块链）：区块以时间顺序前后相连，组成一种块链式数据结构，及“区块链”一词的由来。</p><p>分布式账本（广义区块链）：多参与方各自部署，互联互通，构成分布式网络。</p><a id="more"></a><h3 id="三大支撑技术"><a href="#三大支撑技术" class="headerlink" title="三大支撑技术"></a>三大支撑技术</h3><p>共识算法：针对区块链上发生的交易，保障区块链所有节点数据一致性。</p><p>块链式数据结构：将一段时间内的交易数据打包成区块，再将多个区块按时间顺序有序链接的一种数据结构，用来确保数据的不可篡改性。</p><p>智能合约：一段部署在区块链上可自动运行的程序，可以自动化地执行预先定义好的规则和条款，通过减少人为干预的风险，提升交易的安全与可信任度。</p><h3 id="三种组织形态"><a href="#三种组织形态" class="headerlink" title="三种组织形态"></a>三种组织形态</h3><p>公有链：全球范围可以访问，不依赖于单个公司或辖区，匿名性强，任何参与者都可在中写入、读取、参与交易验证。</p><p>联盟链：联盟链仅限于联盟成员参与，系统内交易确认节点为事先设定，并通过共识机制确认。</p><p>私有链：仅在机构内使用，读写权、记账权由组织内自由定制。中心控制者制定可参与和进行交易验证成员范围。</p><h3 id="共识算法"><a href="#共识算法" class="headerlink" title="共识算法"></a>共识算法</h3><p>BFT(拜占庭容错算法)</p><ul><li><p>数学证明当且仅当三分之二以上的节点忠诚时，可以保证系统运行结果的正确性。</p></li><li><p>三大协议：</p><ul><li>三阶段共识协议：保证了主节点打包的区块通过三阶段共识完成打包结果的一致性确认</li><li>视图变更协议：保证了在主节点作恶情况下，系统可以通过该协议选举出新任的主节点进行共识，且不破坏其原有的共识状态</li><li>检查点机制：保证了各节点经过确认的一致性状态得以持久化</li></ul></li></ul><h3 id="行业分类"><a href="#行业分类" class="headerlink" title="行业分类"></a>行业分类</h3><p>币/模式：比特币 天秤币 Libra（Facebook发行） 摩根币 JPM（摩根大通发行）</p><p>链/技术：公有链 联盟链</p><h3 id="顶层设计"><a href="#顶层设计" class="headerlink" title="顶层设计"></a>顶层设计</h3><p>中共中央政治局10月24日下午就区块链技术发展现状和趋势进行第十八次集体学习。中共中央总书记习近平在主持学习时强调，区块链技术的集成应用在新的技术革新和产业变革中起着重要作用。我们要把区块链作为核心技术自主创新的重要突破口，明确主攻方向，加大投入力度，着力攻克一批关键核心技术，加快推动区块链技术和产业创新发展。</p><h4 id="产业应用"><a href="#产业应用" class="headerlink" title="产业应用"></a>产业应用</h4><ul><li><p>要推动区块链和实体经济深度融合，解决中小企业贷款融资难、银行风控难、部门监管难等问题。</p></li><li><p>要利用区块链技术探索数字经济模式创新。</p></li><li><p>要探索“区块链+”在民生领域的运用，积极推动区块链技术在教育、就业、养老、精准脱贫、医疗健康、商品防伪、食品安全、公益、社会救助等领域的应用，为人民群众提供更加智能、更加便捷、更加优质的公共服务。</p></li><li><p>要推动区块链底层技术服务和新型智慧城市建设相结合探索在信息基础设施、智慧交通、能源电力等领域的推广应用，提升城市管理的智能化、精准化水平。</p></li><li><p>要利用区块链技术促进城市间在信息、资金、人才、征信等方面更大规模的互联互通。</p></li><li><p>要探索利用区块链数据共享模式，实现政务数据跨部门、跨区域共同维护和利用，促进业务协同办理。</p></li></ul><h3 id="技术革新"><a href="#技术革新" class="headerlink" title="技术革新"></a>技术革新</h3><p>当下，各大互联网公司隐私泄露事件频出，一次次加深了公众对垄断性互联网公司的警惕，去中心化的区块链技术被认为是推倒垄断、走向平等的重要技术手段；利用区块链技术的链式存储结构，保证数据不可篡改，密码学保证用户隐私，共识算法保证数据权平等，区块链技术正在构建一个全新的分布式技术架构，成为新一代基础设施。</p><ul><li><p>提升多中心协作效率</p></li><li><p>去中介，提升多方信任</p></li><li><p>打破数据孤岛，提升数据应用效率</p></li><li><p>数据不可篡改，可追溯，可审计</p></li><li><p>自动执行预设，提升约束力，减少摩擦</p></li></ul><h3 id="三个阶段"><a href="#三个阶段" class="headerlink" title="三个阶段"></a>三个阶段</h3><p>可信计算与存储（数据可信）：数字存证 审计监管</p><p>数字化社会（资产可信）：资产数字化 数据资产化</p><p>分布式商业（合作可信）：多中心弱中介 激励生态化</p><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><p>1.业务协作：养老金托管</p><p>利用区块链统筹管理养老金业务信息，将养老金业务流程线上化，提升资金使用效率。</p><ul><li><p>实现养老金业务信息在参与机构之间快速同步</p></li><li><p>提高业务处理流程的透明度，增加数据可信度</p></li><li><p>减少业务处理周期，提高养老金申购赎回频率，提升资金使用率</p></li></ul><p>2.数字资产：信用保险</p><p>供应链企业通过信用险增信，使得信用风险得到更大范围的分散，满足企业低成本融资的诉求。</p><ul><li><p>为中小企业增信，缓解融资困难</p></li><li><p>标准化企业信用，实现风险缓释</p></li><li><p>实现供应链金融体系的信用穿透</p></li><li><p>助力完善社会信用体系</p></li></ul><p>3.存证溯源：可信存证</p><p>存证方通过区块链平台实现电子存证可信存储，任意相关方在线查阅验证。</p><ul><li><p>多方协同，随时调用，实现方便、快捷的可信电子存证</p></li><li><p>存证电子化，节约纸张成本</p></li><li><p>电子存证灵活对接，便于业务拓展</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;from 陈纯院士的讲座&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;区块链本质&quot;&gt;&lt;a href=&quot;#区块链本质&quot; class=&quot;headerlink&quot; title=&quot;区块链本质&quot;&gt;&lt;/a&gt;区块链本质&lt;/h2&gt;&lt;h3 id=&quot;术语解释&quot;&gt;&lt;a href=&quot;#术语解释&quot; class=&quot;headerlink&quot; title=&quot;术语解释&quot;&gt;&lt;/a&gt;术语解释&lt;/h3&gt;&lt;p&gt;交易：交易指的是一次对账本的操作，如一笔转账交易。&lt;/p&gt;
&lt;p&gt;区块：将一段时间内发生的所有交易和状态打包成为一个区块。&lt;/p&gt;
&lt;p&gt;块链式数据结构（狭义区块链）：区块以时间顺序前后相连，组成一种块链式数据结构，及“区块链”一词的由来。&lt;/p&gt;
&lt;p&gt;分布式账本（广义区块链）：多参与方各自部署，互联互通，构成分布式网络。&lt;/p&gt;
    
    </summary>
    
    
      <category term="区块链" scheme="blog.zhengxiangling.com/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    
      <category term="技术应用" scheme="blog.zhengxiangling.com/tags/%E6%8A%80%E6%9C%AF%E5%BA%94%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>macOS Mojave 安装双系统 bug 总结</title>
    <link href="blog.zhengxiangling.com/2019/03/23/macOS-Mojave%E5%AE%89%E8%A3%85%E5%8F%8C%E7%B3%BB%E7%BB%9F-bug-%E6%80%BB%E7%BB%93/"/>
    <id>blog.zhengxiangling.com/2019/03/23/macOS-Mojave安装双系统-bug-总结/</id>
    <published>2019-03-23T01:24:00.000Z</published>
    <updated>2019-10-30T08:13:41.546Z</updated>
    
    <content type="html"><![CDATA[<p>  在 mac 上装 windows10 双系统一般是由于    </p><ol><li>开发的需要，有些系统级的架构只支持windows，不适合在 mac 上开发。</li><li>运行的游戏只支持 windows，无法在 mac 上运行。    </li></ol><p>macOS Mojave 只支持安装 windows10，往下的版本不再支持。<code>启动转移助理（BootCamp）</code>的功能目前也限制于制作双系统和将双系统恢复为单一分区，取消了之前支持windows多版本和制作u盘启动盘的选项。不过目前仍可用代码来制作u盘启动盘。</p><p>在 mac 上用 windows10 u盘启动盘来安装双系统是行不通的，因为会导致缺少驱动而不能往下安装，所以就只能走<code>启动转移助理</code>这条路。<br>windows10 经常更新版本，导致 mac 使用<code>启动转移助理</code>安装双系统时会出现各种各样的问题。列举如下：    </p><ol><li>版本问题。用 macOS Mojave 10.14版本只能安装 windows10 4月版的，安装10月版的会出现错误。将macOS Mojave升级到 10.14.3版本解决版本问题。</li><li>外接设备导致无法安装 windows 的问题。当进入到 windows 安装界面时，必须把所有外接设备（鼠标、u盘等）全部拔出，不然会出现分区找不到的错误导致无法安装 windows。</li><li>一旦将 windows 安装完毕之后，分配的硬盘空间将无法调整，所以分磁盘空间的时候必须考虑清楚。</li><li>用 mac 上的<code>磁盘工具</code>直接将 windows 分区抹除再合并分区，可能会导致下次安装 windows 失败，所以要删掉之前安装好的 windows 的办法是用<code>启动转移助理</code>将 windows 合并成单一分区。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;  在 mac 上装 windows10 双系统一般是由于    &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;开发的需要，有些系统级的架构只支持windows，不适合在 mac 上开发。&lt;/li&gt;
&lt;li&gt;运行的游戏只支持 windows，无法在 mac 上运行。    &lt;/li&gt;
&lt;/o
      
    
    </summary>
    
    
      <category term="系统" scheme="blog.zhengxiangling.com/categories/%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="macOS" scheme="blog.zhengxiangling.com/tags/macOS/"/>
    
  </entry>
  
  <entry>
    <title>软考易错题总结</title>
    <link href="blog.zhengxiangling.com/2018/05/23/%E8%BD%AF%E8%80%83%E6%98%93%E9%94%99%E9%A2%98%E6%80%BB%E7%BB%93/"/>
    <id>blog.zhengxiangling.com/2018/05/23/软考易错题总结/</id>
    <published>2018-05-23T12:43:13.000Z</published>
    <updated>2019-10-30T08:13:41.556Z</updated>
    
    <content type="html"><![CDATA[<p>对于软考中经常做错的题，做个总结。</p><a id="more"></a><p>1、考查设计模式基础概念，需要搞清楚各个设计模式的特点与不同，设计模式共有结构型，创建型，行为型三大类，里面又各自包含了多种具体详细模式。具体内容如下：<br><img src="https://cdn.zhengxiangling.com/18-5-23/74933918.jpg" alt=""></p><p>例：<br>创建型设计模式抽象了实例化过程，有助于系统开发者将对象的创建、组合和表示方式进行抽象。以下（48）模式是创建型模式。<br>A．组合(Composite)        B．装饰器（Decorator）<br>C．代理(Proxy)            D．单例（Singleton）<br>【答案】D</p><p>2、考察软件测试的基础知识。</p><p>白盒测试的方法包括一系列的逻辑覆盖，主要的覆盖标准有语句覆盖、判定覆盖、条件覆盖、条件/判定覆盖、条件组合覆盖、修正的条件/判定覆盖和路径覆盖等。<br>（1）语句覆盖。语句覆盖是指选择足够多的测试用例，使得运行这些测试用例时，被测程序的每个语句至少执行一次。很显然，语句覆盖是一种很弱的覆盖标准。<br>（2）判定覆盖。判定覆盖也称为分支覆盖，它是指不仅每个语句至少执行一次，而且每个判定的每种可能的结果（分支）都至少执行一次。判定覆盖比语句覆盖强，但对程序逻辑的覆盖程度仍然不高。<br>（3）条件覆盖。条件覆盖是指不仅每个语句至少执行一次，而且使判定表达式中的每个条件都取得各种可能的结果。条件覆盖不一定包含判定覆盖，判定覆盖也不一定包含条件覆盖。<br>（4）路径覆盖。路径覆盖是指选取足够的测试用例，使得程序的每条可能执行到的路径都至少经过一次（如果程序中有环路，则要求每条环路路径至少经过一次）。路径覆盖实际上考虑了程序中各种判定结果的所有可能组合，因此是一种较强的覆盖标准。但路径覆盖并未考虑判定中的条件结果的组合，并不能代替条件覆盖和条件组合覆盖。</p><p>3、<br>数据字典是用来定义数据流图中各个成分的具体含义，它以一种准确的、无二义性的说明方法为系统的分析、设计及维护提供了有关元素一致的定义和详细的描述。<br>数据库设计可以分为需求分析阶段、概念结构设计、逻辑结构设计和物理结构设计等阶段。<br>需求分析阶段：分析用户的需求，包括数据、功能和性能需求；<br>概念结构设计：在分析阶段，已经得到了系统的数据流程图和数据字典，现在要结合数据规范化的理论，用一种数据模型将用户的数据需求明确地表示出来。概念数据模型是面向问题的模型，反映了用户的现实工作环境，是与数据库的具体实现技术无关的。建立系统概念数据模型的过程叫做概念结构设计。<br>逻辑结构设计：根据已经建立的概念数据模型，以及所采用的某个数据库管理系统软件的数据模型特性，按照一定的转换规则，把概念模型转换为这个数据库管理系统所能够接受的逻辑数据模型。不同的数据库管理系统提供了不同的逻辑数据模型，如层次模型、网状模型、关系模型等。物理结构设计：为一个确定的逻辑数据模型选择一个最适合应用要求的物理结构的过程，就叫做数据库的物理结构设计。<br>数据库在物理设备上的存储结构和存取方法称为数据库的物理数据模型。    </p><p>4、<br>原子性：事务是原子的，要么做，要么都不做。<br>一致性：事务执行的结果必须保证数据库从一个一致性状态变到另一个一致性状态。<br>隔离性：事务相互隔离。当多个事务并发执行时，任一事务的更新操作直到其成功提交的整个过程，对其它事物都是不可见的。<br>持久性：一旦事务成功提交，即使数据库崩溃，其对数据库的更新操作也永久有效。<br>串行调度：多个事务依次串行执行，且只有当一个事务的所有操作都执行完后才执行另一个事务的所有操作。<br>可串行化保证了事务并行调度时，相互不破坏，同时保证了数据从一个一致性状态到另一个一致性状态。    </p><p>5、<br>UML2.0中提供了13种图形，一部分图给出了系统的动态视图，一部分图则给出系统的静态视图。</p><p>活动图展现了在系统内从一个活动到另一个活动的流程， 专注于系统的动态视图，它对于系统的功能建模特别重要，并强调对象间的控制流程，是状态图的一种特殊情况。通信图强调收发消息的对象之间的结构组织， 强调参加交互的对象的组织。 序列图是场景的图形化表示， 描述了以时间顺序组织的对象之间的交互活动， 对用例中的场景可以采用序列图进行描述。 定时图或时序图， 是UML2.0中新增的、特别适合实时和嵌入式系统建模的交互图，它关注沿着线性时间轴、生命线内部和生命线之间的条件改变，描述对象状态随着时间改变的情况，很像示波器，如下图所示，适合分析周期和非周期性任务。</p><p>类图展现了一组对象、 接口、 协作及其之间的关系， 属于静态视图；对象图展现了某一时刻一组对象以及它们之间的关系， 描述了在类图中所建立的事物的实例的静态快照；组件图／构件图展现了一组构件之间的组织和依赖， 专注于系统的静态实现视图， 它与类图相关， 通常把构件映射为一个或多个类、 接口或协作：包图是用于把模型本身组织成层次结构的通用机制， 不能执行， 展现由模型本身分解而成的组织单元以及其间的依赖关系。</p><p>6、<br>从模块独立性角度看，以下几种模块内聚类型中，（50）内聚是最好的。</p><p>(50)A.巧合            B.逻辑            C.信息            D.功能</p><p>【答案】D</p><p>【解析】本题考查软件设计的基础知识。</p><p>模块化是指将软件划分成独立命名且可以独立访问的模块， 不同的模块通常具有不同的功能或职责。 每个模块可以独立地开发、 测试， 最后组装成完整的软件。 模块独立性是指软件系统中每个模块只涉及软件要求的具体的一个子功能，而和其他模块之间的接口尽量简单， 是模块化设计的一个重要原则， 主要用模块间的精合和模块内的内聚来衡量。</p><p>模块的内聚性一搬有以下几种：<br>巧合内聚指一个模块内的几个处理元素之间没有任何联系。</p><p>逻辑内聚， 指模块内执行几个逻辑上相似的功能， 通过参数确定该模块完成哪一个功能。</p><p>时间内聚，把需要同时执行的动作组合在一起形成的模块。</p><p>通信内聚，指模块内所有处理元素都在同一个数据结构上操作，或者指各处理使用相同的输入数据或者产生相同的输出数据。</p><p>顺序内聚，指一个模块中各个处理元素都密切相关于同一功能且必须顺序执行，前一个功能元素的输出就是下一个功能元素的输入。</p><p>功能内聚， 是最强的内聚， 指模块内所有元素共同完成一个功能， 缺一不可。 是最佳的内聚类型。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;对于软考中经常做错的题，做个总结。&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>搭建微信小程序服务</title>
    <link href="blog.zhengxiangling.com/2018/04/11/%E6%90%AD%E5%BB%BA%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%9C%8D%E5%8A%A1/"/>
    <id>blog.zhengxiangling.com/2018/04/11/搭建微信小程序服务/</id>
    <published>2018-04-11T11:52:00.000Z</published>
    <updated>2019-10-30T08:13:41.556Z</updated>
    
    <content type="html"><![CDATA[<p>手把手搭建微信小程序服务。</p><a id="more"></a><p>1.安装 NodeJS 和 NPM</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl --silent --location https://rpm.nodesource.com/setup_8.x | sudo bash -</span><br><span class="line">yum install nodejs -y</span><br></pre></td></tr></table></figure><p>安装完成后查看安装是否成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure><p>2.创建并进入文件夹</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir -p /data/release/weapp</span><br><span class="line">$ <span class="built_in">cd</span> /data/release/weapp</span><br></pre></td></tr></table></figure><p>3.新建package.json</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"weapp"</span>,</span><br><span class="line">    <span class="attr">"version"</span>: <span class="string">"1.0.0"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.添加 express 服务</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引用 express 来支持 HTTP Server 的实现</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个 express 实例</span></span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现唯一的一个中间件，对于所有请求，都输出 "Response from express"</span></span><br><span class="line">app.use(<span class="function">(<span class="params">request, response, next</span>) =&gt;</span> &#123;</span><br><span class="line">    response.write(<span class="string">'Response from express'</span>);</span><br><span class="line">    response.end();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听端口，等待连接</span></span><br><span class="line"><span class="keyword">const</span> port = <span class="number">8765</span>;</span><br><span class="line">app.listen(port);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出服务器启动日志</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`Server listening at http://127.0.0.1:<span class="subst">$&#123;port&#125;</span>`</span>);</span><br></pre></td></tr></table></figure><p>4.运行http<br>1)安装 pm2</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install pm2 --global</span><br></pre></td></tr></table></figure><p>2)安装 express</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install express --save</span><br></pre></td></tr></table></figure><p>3)安装完成后，使用 PM2 来启动 HTTP 服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pm2 start app.js</span><br></pre></td></tr></table></figure><p>pm2 常用命令</p><p>要查看服务输出的日志，可以使用下面的命令：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pm2 logs</span><br></pre></td></tr></table></figure><p>如果要重启服务，可以使用下面的命令：        </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pm2 restart app</span><br></pre></td></tr></table></figure><p>5.安装 Nginx<br>如果是 centOS，可以用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install nginx -y</span><br></pre></td></tr></table></figure><p>安装完成后启动nginx</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx</span><br></pre></td></tr></table></figure><p>6.准备ssl证书，方法有很多种，现在有很多免费的ssl证书</p><p>7.ssl配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen 443;</span><br><span class="line">        server_name www.example.com; # 改为绑定证书的域名</span><br><span class="line">        # ssl 配置</span><br><span class="line">        ssl on;</span><br><span class="line">        ssl_certificate 1_www.example.com_bundle.crt; # 改为自己申请得到的 crt 文件的名称</span><br><span class="line">        ssl_certificate_key 2_www.example.com.key; # 改为自己申请得到的 key 文件的名称</span><br><span class="line">        ssl_session_timeout 5m;</span><br><span class="line">        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class="line">        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;</span><br><span class="line">        ssl_prefer_server_ciphers on;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            proxy_pass http://127.0.0.1:8765;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>8.安装 mongoDB<br>以下是针对centOS的，其他方法之后补充。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install mongodb-server mongodb -y</span><br></pre></td></tr></table></figure><p>检查是否安装成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mongod --version</span><br><span class="line">mongo --version</span><br></pre></td></tr></table></figure><p>9.启动mongoDB<br>1)创建目录，用于 MongoDB 数据和日志存储</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /data/mongodb</span><br><span class="line">mkdir -p /data/logs/mongodb</span><br></pre></td></tr></table></figure><p>2)启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongod --fork --dbpath /data/mongodb --logpath /data/logs/mongodb/weapp.log</span><br></pre></td></tr></table></figure><p>(MongoDB 首次启动可能会花费大概 1min 时间，请耐心等待)</p><p>3)检查是否启动成功<br>(MongoDB 默认监听 27017 端口等待连接，下面的命令查看当前 27017 端口被哪个进程占用，如果是 MongoDB 的进程，则表示启动成功。)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -ltp | grep 27017</span><br></pre></td></tr></table></figure><p>10.添加 MongoDB 用户</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ mongo</span><br><span class="line"></span><br><span class="line">&gt; use weapp;</span><br><span class="line">&gt; db.createUser(&#123; user: <span class="string">'weapp'</span>, <span class="built_in">pwd</span>: <span class="string">'weapp-dev'</span>, roles: [<span class="string">'dbAdmin'</span>, <span class="string">'readWrite'</span>]&#125;);</span><br></pre></td></tr></table></figure><p>mongo2.x 的时候用db.addUser()</p><p>创建完之后，<code>exit</code> 退出</p><p>11.安装 Node 模块<br>实现小程序的会话功能，我们需要安装 connect-mongo 和 wafer-node-session</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /data/release/weapp</span><br><span class="line">npm install connect-mongo wafer-node-session</span><br></pre></td></tr></table></figure><p>12.实现小程序会话<br>1)在工作目录<code>weapp</code>创建配置文件 <code>config.js</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123; </span><br><span class="line">    serverPort: <span class="string">'8765'</span>, </span><br><span class="line"></span><br><span class="line">    // 小程序 appId 和 appSecret </span><br><span class="line">    // 请到 https://mp.weixin.qq.com 获取 AppID 和 AppSecret</span><br><span class="line">    appId: <span class="string">'YORU_APP_ID'</span>, </span><br><span class="line">    appSecret: <span class="string">'YOUR_APP_SECRET'</span>, </span><br><span class="line"></span><br><span class="line">    // mongodb 连接配置，生产环境请使用更复杂的用户名密码</span><br><span class="line">    mongoHost: <span class="string">'127.0.0.1'</span>, </span><br><span class="line">    mongoPort: <span class="string">'27017'</span>, </span><br><span class="line">    mongoUser: <span class="string">'weapp'</span>, </span><br><span class="line">    mongoPass: <span class="string">'weapp-dev'</span>, </span><br><span class="line">    mongoDb: <span class="string">'weapp'</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>2)修改 app.js，添加会话实现逻辑</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引用 express 来支持 HTTP Server 的实现</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="comment">// 引用 wafer-session 支持小程序会话</span></span><br><span class="line"><span class="keyword">const</span> waferSession = <span class="built_in">require</span>(<span class="string">'wafer-node-session'</span>); </span><br><span class="line"><span class="comment">// 使用 MongoDB 作为会话的存储</span></span><br><span class="line"><span class="keyword">const</span> MongoStore = <span class="built_in">require</span>(<span class="string">'connect-mongo'</span>)(waferSession); </span><br><span class="line"><span class="comment">// 引入配置文件</span></span><br><span class="line"><span class="keyword">const</span> config = <span class="built_in">require</span>(<span class="string">'./config'</span>); </span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个 express 实例</span></span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加会话中间件，登录地址是 /login</span></span><br><span class="line">app.use(waferSession(&#123; </span><br><span class="line">    appId: config.appId, </span><br><span class="line">    appSecret: config.appSecret, </span><br><span class="line">    loginPath: <span class="string">'/login'</span>,</span><br><span class="line">    store: <span class="keyword">new</span> MongoStore(&#123; </span><br><span class="line">        url: <span class="string">`mongodb://<span class="subst">$&#123;config.mongoUser&#125;</span>:<span class="subst">$&#123;config.mongoPass&#125;</span>@<span class="subst">$&#123;config.mongoHost&#125;</span>:<span class="subst">$&#123;config.mongoPort&#125;</span>/<span class="subst">$&#123;config.mongoDb&#125;</span>`</span> </span><br><span class="line">    &#125;) </span><br><span class="line">&#125;)); </span><br><span class="line"></span><br><span class="line"><span class="comment">// 在路由 /me 下，输出会话里包含的用户信息</span></span><br><span class="line">app.use(<span class="string">'/me'</span>, (request, response, next) =&gt; &#123; </span><br><span class="line">    response.json(request.session ? request.session.userInfo : &#123; <span class="attr">noBody</span>: <span class="literal">true</span> &#125;); </span><br><span class="line">    <span class="keyword">if</span> (request.session) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`Wafer session success with openId=<span class="subst">$&#123;request.session.userInfo.openId&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;); </span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现一个中间件，对于未处理的请求，都输出 "Response from express"</span></span><br><span class="line">app.use(<span class="function">(<span class="params">request, response, next</span>) =&gt;</span> &#123;</span><br><span class="line">    response.write(<span class="string">'Response from express'</span>);</span><br><span class="line">    response.end();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听端口，等待连接</span></span><br><span class="line">app.listen(config.serverPort);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出服务器启动日志</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`Server listening at http://127.0.0.1:<span class="subst">$&#123;config.serverPort&#125;</span>`</span>);</span><br></pre></td></tr></table></figure><p>3)重启 <code>pm2</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pm2 restart app</span><br></pre></td></tr></table></figure><p>13.WebSocket 服务<br>1)安装 Node 模块<br>使用 ws 模块来在服务器上支持 WebSocket 协议，下面使用 NPM 来安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /data/release/weapp</span><br><span class="line">npm install ws --save</span><br></pre></td></tr></table></figure><p>2)创建 websocket.js，实现 WebSocket 服务，可参考下面的代码：<br><code>websocket.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入 ws 支持 WebSocket 的实现</span></span><br><span class="line"><span class="keyword">const</span> ws = <span class="built_in">require</span>(<span class="string">'ws'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导出处理方法</span></span><br><span class="line">exports.listen = listen;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 在 HTTP Server 上处理 WebSocket 请求</span></span><br><span class="line"><span class="comment"> * @param &#123;http.Server&#125; server</span></span><br><span class="line"><span class="comment"> * @param &#123;wafer.SessionMiddleware&#125; sessionMiddleware</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">listen</span>(<span class="params">server, sessionMiddleware</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 使用 HTTP Server 创建 WebSocket 服务，使用 path 参数指定需要升级为 WebSocket 的路径</span></span><br><span class="line">    <span class="keyword">const</span> wss = <span class="keyword">new</span> ws.Server(&#123; server, <span class="attr">path</span>: <span class="string">'/ws'</span> &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 监听 WebSocket 连接建立</span></span><br><span class="line">    wss.on(<span class="string">'connection'</span>, (ws,request) =&gt; &#123;<span class="comment">// 要升级到 WebSocket 协议的 HTTP 连接</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 被升级到 WebSocket 的请求不会被 express 处理，</span></span><br><span class="line">        <span class="comment">// 需要使用会话中间节获取会话</span></span><br><span class="line">        sessionMiddleware(request, <span class="literal">null</span>, () =&gt; &#123;</span><br><span class="line">            <span class="keyword">const</span> session = request.session;</span><br><span class="line">            <span class="keyword">if</span> (!session) &#123;</span><br><span class="line">                <span class="comment">// 没有获取到会话，强制断开 WebSocket 连接</span></span><br><span class="line">                ws.send(<span class="built_in">JSON</span>.stringify(request.sessionError) || <span class="string">"No session avaliable"</span>);</span><br><span class="line">                ws.close();</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 保留这个日志的输出可让实验室能检查到当前步骤是否完成</span></span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">`WebSocket client connected with openId=<span class="subst">$&#123;session.userInfo.openId&#125;</span>`</span>);</span><br><span class="line">            serveMessage(ws, session.userInfo);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 监听 WebSocket 服务的错误</span></span><br><span class="line">    wss.on(<span class="string">'error'</span>, (err) =&gt; &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(err);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 进行简单的 WebSocket 服务，对于客户端发来的所有消息都回复回去</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">serveMessage</span>(<span class="params">ws, userInfo</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 监听客户端发来的消息</span></span><br><span class="line">    ws.on(<span class="string">'message'</span>, (message) =&gt; &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`WebSocket received: <span class="subst">$&#123;message&#125;</span>`</span>);</span><br><span class="line">        ws.send(<span class="string">`Server: Received(<span class="subst">$&#123;message&#125;</span>)`</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 监听关闭事件</span></span><br><span class="line">    ws.on(<span class="string">'close'</span>, (code, message) =&gt; &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`WebSocket client closed (code: <span class="subst">$&#123;code&#125;</span>, message: <span class="subst">$&#123;message || <span class="string">'none'</span>&#125;</span>)`</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 连接后马上发送 hello 消息给会话对应的用户</span></span><br><span class="line">    ws.send(<span class="string">`Server: 恭喜，<span class="subst">$&#123;userInfo.nickName&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改 <code>app.js</code> ,调用 WebSocket 服务，可参考下面代码:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// HTTP 模块同时支持 Express 和 WebSocket</span></span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>); </span><br><span class="line"><span class="comment">// 引用 express 来支持 HTTP Server 的实现</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="comment">// 引用 wafer-session 支持小程序会话</span></span><br><span class="line"><span class="keyword">const</span> waferSession = <span class="built_in">require</span>(<span class="string">'wafer-node-session'</span>); </span><br><span class="line"><span class="comment">// 使用 MongoDB 作为会话的存储</span></span><br><span class="line"><span class="keyword">const</span> MongoStore = <span class="built_in">require</span>(<span class="string">'connect-mongo'</span>)(waferSession); </span><br><span class="line"><span class="comment">// 引入配置文件</span></span><br><span class="line"><span class="keyword">const</span> config = <span class="built_in">require</span>(<span class="string">'./config'</span>); </span><br><span class="line"><span class="comment">// 引入 WebSocket 服务实现</span></span><br><span class="line"><span class="keyword">const</span> websocket = <span class="built_in">require</span>(<span class="string">'./websocket'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个 express 实例</span></span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 独立出会话中间件给 express 和 ws 使用</span></span><br><span class="line"><span class="keyword">const</span> sessionMiddleware = waferSession(&#123;</span><br><span class="line">    appId: config.appId,</span><br><span class="line">    appSecret: config.appSecret,</span><br><span class="line">    loginPath: <span class="string">'/login'</span>,</span><br><span class="line">    store: <span class="keyword">new</span> MongoStore(&#123;</span><br><span class="line">        url: <span class="string">`mongodb://<span class="subst">$&#123;config.mongoUser&#125;</span>:<span class="subst">$&#123;config.mongoPass&#125;</span>@<span class="subst">$&#123;config.mongoHost&#125;</span>:<span class="subst">$&#123;config.mongoPort&#125;</span>/<span class="subst">$&#123;config.mongoDb&#125;</span>`</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br><span class="line">app.use(sessionMiddleware);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在路由 /me 下，输出会话里包含的用户信息</span></span><br><span class="line">app.use(<span class="string">'/me'</span>, (request, response, next) =&gt; &#123; </span><br><span class="line">    response.json(request.session ? request.session.userInfo : &#123; <span class="attr">noBody</span>: <span class="literal">true</span> &#125;); </span><br><span class="line">    <span class="keyword">if</span> (request.session) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`Wafer session success with openId=<span class="subst">$&#123;request.session.userInfo.openId&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;); </span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现一个中间件，对于未处理的请求，都输出 "Response from express"</span></span><br><span class="line">app.use(<span class="function">(<span class="params">request, response, next</span>) =&gt;</span> &#123;</span><br><span class="line">    response.write(<span class="string">'Response from express'</span>);</span><br><span class="line">    response.end();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建 HTTP Server 而不是直接使用 express 监听</span></span><br><span class="line"><span class="keyword">const</span> server = http.createServer(app);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 让 WebSocket 服务在创建的 HTTP 服务器上监听</span></span><br><span class="line">websocket.listen(server, sessionMiddleware);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 启动 HTTP 服务</span></span><br><span class="line">server.listen(config.serverPort);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出服务器启动日志</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`Server listening at http://127.0.0.1:<span class="subst">$&#123;config.serverPort&#125;</span>`</span>);</span><br></pre></td></tr></table></figure><p>修改完成后，按 Ctrl + S 保存文件，并重启服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pm2 restart app</span><br></pre></td></tr></table></figure><p>3)更新 Nginx 代理</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"># WebSocket 配置</span><br><span class="line">map $http_upgrade $connection_upgrade &#123;</span><br><span class="line">    default upgrade;</span><br><span class="line">    &apos;&apos;      close;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">        listen 443;</span><br><span class="line">        server_name www.example.com; # 改为绑定证书的域名</span><br><span class="line">        # ssl 配置</span><br><span class="line">        ssl on;</span><br><span class="line">        ssl_certificate 1_www.example.com.crt; # 改为自己申请得到的 crt 文件的名称</span><br><span class="line">        ssl_certificate_key 2_www.example.com.key; # 改为自己申请得到的 key 文件的名称</span><br><span class="line">        ssl_session_timeout 5m;</span><br><span class="line">        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class="line">        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;</span><br><span class="line">        ssl_prefer_server_ciphers on;</span><br><span class="line"></span><br><span class="line">        # WebSocket 配置</span><br><span class="line">        proxy_set_header Upgrade $http_upgrade;</span><br><span class="line">        proxy_set_header Connection $connection_upgrade;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            proxy_pass http://127.0.0.1:8765;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>修改完成后重启<code>nginx</code>:<br>`` bash<br>nginx -s reload<br>```</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;手把手搭建微信小程序服务。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="小程序" scheme="blog.zhengxiangling.com/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>网站服务状态及ssl证书状态在线检测工具</title>
    <link href="blog.zhengxiangling.com/2018/03/17/%E7%BD%91%E7%AB%99%E6%9C%8D%E5%8A%A1%E7%8A%B6%E6%80%81%E5%8F%8Assl%E8%AF%81%E4%B9%A6%E7%8A%B6%E6%80%81%E5%9C%A8%E7%BA%BF%E6%A3%80%E6%B5%8B%E5%B7%A5%E5%85%B7/"/>
    <id>blog.zhengxiangling.com/2018/03/17/网站服务状态及ssl证书状态在线检测工具/</id>
    <published>2018-03-17T07:19:00.000Z</published>
    <updated>2019-10-30T08:13:41.556Z</updated>
    
    <content type="html"><![CDATA[<p>为了检测多个网站及检测网站ssl证书有效性，写了一个在线测试检测工具。</p><a id="more"></a><h5 id="实现功能"><a href="#实现功能" class="headerlink" title="实现功能"></a>实现功能</h5><p>自由添加和编辑站点信息<br>单选及多选检测<br>支持http和https检测<br>当有ssl证书时，检测证书的有效状态以及过期时间<br>查看检测历史     </p><h5 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h5><p>python3 node-8.9.1 </p><h5 id="框架及数据库"><a href="#框架及数据库" class="headerlink" title="框架及数据库"></a>框架及数据库</h5><p>后端：<code>tornado</code><br>前端：<code>vue</code><br>数据库：<code>mongo</code></p><h5 id="http检测状态实现原理"><a href="#http检测状态实现原理" class="headerlink" title="http检测状态实现原理"></a>http检测状态实现原理</h5><p>通过 python <code>requests</code> 库</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    web_url = <span class="string">'http://...'</span></span><br><span class="line">    <span class="comment"># timeout - 请求超时时间</span></span><br><span class="line">    r = requests.get(web_url, timeout=<span class="number">10</span>)</span><br><span class="line">    print(<span class="string">'请求成功'</span>)</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 输出错误原因</span></span><br><span class="line">    print(e)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span>;</span><br></pre></td></tr></table></figure><h5 id="https-检测状态及ssl证书状态测试实现原理"><a href="#https-检测状态及ssl证书状态测试实现原理" class="headerlink" title="https 检测状态及ssl证书状态测试实现原理"></a>https 检测状态及ssl证书状态测试实现原理</h5><p>运用 <code>socket</code> 库建立连接，<code>ssl</code>库获取ssl证书的公钥，在通过<code>openssl</code>的<code>crypto</code>通过公钥解密获取ssl证书里的信息。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ssl</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">from</span> OpenSSL <span class="keyword">import</span> crypto</span><br><span class="line"></span><br><span class="line">web_url = <span class="string">'https://...'</span></span><br><span class="line"><span class="comment"># ssl.PROTOCOL_TLS - ssl支持协议</span></span><br><span class="line">context = ssl.SSLContext(ssl.PROTOCOL_TLS)</span><br><span class="line"><span class="comment"># 建立 socket 连接   </span></span><br><span class="line"><span class="comment"># socket.AF_INET 为 IPv4 网络协议的套接字类型</span></span><br><span class="line">sock = socket.socket(socket.AF_INET)</span><br><span class="line"><span class="comment"># 设置超时时间 10s</span></span><br><span class="line">sock.settimeout(<span class="number">10</span>)</span><br><span class="line">wrappedSocket = context.wrap_socket(socket.socket(socket.AF_INET), server_hostname=web_url</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    wrappedSocket.connect(web_url, <span class="number">443</span>))</span><br><span class="line">    <span class="comment"># 获取 ssl 证书公钥</span></span><br><span class="line">    pem_cert = ssl.DER_cert_to_PEM_cert(wrappedSocket.getpeercert(<span class="literal">True</span>))</span><br><span class="line">    wrappedSocket.close()</span><br><span class="line">    <span class="comment"># 解密公钥</span></span><br><span class="line">    io_cert = crypto.load_certificate(crypto.FILETYPE_PEM, pem_cert)</span><br><span class="line">    <span class="comment"># 证书过期时间</span></span><br><span class="line">    ssl_time = io_cert.get_notAfter().decode()[:<span class="number">-1</span>]</span><br><span class="line">    ssl_not_after = ssl_time[<span class="number">0</span>:<span class="number">4</span>] + <span class="string">'年'</span> + ssl_time[<span class="number">4</span>:<span class="number">6</span>] + <span class="string">'月'</span> + ssl_time[<span class="number">6</span>:<span class="number">8</span>] + <span class="string">'日'</span> + ssl_time[<span class="number">8</span>:<span class="number">10</span>] + <span class="string">'时'</span> + ssl_time[<span class="number">10</span>:<span class="number">12</span>] + <span class="string">'分'</span> + ssl_time[<span class="number">12</span>:<span class="number">14</span>] + <span class="string">'秒'</span></span><br><span class="line">    <span class="comment"># 证书有效状态</span></span><br><span class="line">    ssl_expired = io_cert.has_expired()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 连接失败，输出错误原因</span></span><br><span class="line">    print(e)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span>;</span><br></pre></td></tr></table></figure><h5 id="遇到问题"><a href="#遇到问题" class="headerlink" title="遇到问题"></a>遇到问题</h5><p>1.<code>webpack</code>打包时遇到</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">You are using the runtime-only build of Vue <span class="built_in">where</span> the template compiler is not available. Either pre-compile the templates into render <span class="built_in">functions</span>, or use the compiler-included build.</span><br></pre></td></tr></table></figure><p>解决办法，在<code>webpack</code>配置中增加</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">resolve: &#123;</span><br><span class="line">    alias: &#123;</span><br><span class="line">        vue: <span class="string">'vue/dist/vue.js'</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h5><blockquote><p>ssl — TLS/SSL wrapper for socket objects - <a href="https://docs.python.org/3.2/library/ssl.html#ssl.SSLSocket.getpeercert" target="_blank" rel="noopener">https://docs.python.org/3.2/library/ssl.html#ssl.SSLSocket.getpeercert</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;为了检测多个网站及检测网站ssl证书有效性，写了一个在线测试检测工具。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="python" scheme="blog.zhengxiangling.com/tags/python/"/>
    
      <category term="vue" scheme="blog.zhengxiangling.com/tags/vue/"/>
    
      <category term="webpack" scheme="blog.zhengxiangling.com/tags/webpack/"/>
    
      <category term="tornado" scheme="blog.zhengxiangling.com/tags/tornado/"/>
    
      <category term="ssl" scheme="blog.zhengxiangling.com/tags/ssl/"/>
    
      <category term="mongo" scheme="blog.zhengxiangling.com/tags/mongo/"/>
    
  </entry>
  
  <entry>
    <title>学习 webpack</title>
    <link href="blog.zhengxiangling.com/2018/03/11/%E5%AD%A6%E4%B9%A0-webpack/"/>
    <id>blog.zhengxiangling.com/2018/03/11/学习-webpack/</id>
    <published>2018-03-11T04:18:00.000Z</published>
    <updated>2019-10-30T08:13:41.556Z</updated>
    
    <content type="html"><![CDATA[<h5 id="learn-webpack"><a href="#learn-webpack" class="headerlink" title="learn-webpack"></a>learn-webpack</h5><p>学习webpack</p><h5 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h5><p>node 8.9.1<br>npm 5.7.1<br>webpack 4   </p><h5 id="script"><a href="#script" class="headerlink" title="script"></a>script</h5><p>开发模式 - npm run dev<br>打包 - npm run build<br>运行打包后的文件 - npm run server   </p><h5 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h5><ol><li>多入口 html - 配置入口 <code>config/entry.json</code>   </li><li>base64 处理limit限制以下的图片   </li><li>css预处理    </li><li>dev模式下热重载  </li><li>babel-loader 转es5</li><li>image-webpack-loader 压缩图片    </li><li>SplitChunksPlugin 提取公共js</li><li>postcss-loader 自动增加css3前缀</li><li>html-withimg-loader 增加html识别图片路径</li><li>分类css img js 到不同的文件夹中</li></ol><p><a href="https://github.com/ElijahZheng/learn-webpack.git" target="_blank" rel="noopener">github传送门</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h5 id=&quot;learn-webpack&quot;&gt;&lt;a href=&quot;#learn-webpack&quot; class=&quot;headerlink&quot; title=&quot;learn-webpack&quot;&gt;&lt;/a&gt;learn-webpack&lt;/h5&gt;&lt;p&gt;学习webpack&lt;/p&gt;
&lt;h5 id=&quot;环境&quot;&gt;
      
    
    </summary>
    
    
    
      <category term="webpack" scheme="blog.zhengxiangling.com/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>Django 实现登录，注册，用 Pillow 添加验证码</title>
    <link href="blog.zhengxiangling.com/2018/02/13/django-%E5%AE%9E%E7%8E%B0%E7%99%BB%E5%BD%95%EF%BC%8C%E6%B3%A8%E5%86%8C%EF%BC%8C%E7%94%A8-Pillow-%E6%B7%BB%E5%8A%A0%E9%AA%8C%E8%AF%81%E7%A0%81/"/>
    <id>blog.zhengxiangling.com/2018/02/13/django-实现登录，注册，用-Pillow-添加验证码/</id>
    <published>2018-02-13T06:52:00.000Z</published>
    <updated>2019-10-30T08:13:41.546Z</updated>
    
    <content type="html"><![CDATA[<p>用 Django 作为后端，Django 有自己的一套登录和注册方式（User Model），可以对 User Model 进行扩展，新作一张表 user_ext 。    </p><p>然后用 Pillow 生成验证码，防止刷用户注册。</p><p><a href="https://github.com/ElijahZheng/django-register.git" target="_blank" rel="noopener">github 传送门</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;用 Django 作为后端，Django 有自己的一套登录和注册方式（User Model），可以对 User Model 进行扩展，新作一张表 user_ext 。    &lt;/p&gt;
&lt;p&gt;然后用 Pillow 生成验证码，防止刷用户注册。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;
      
    
    </summary>
    
    
    
      <category term="django" scheme="blog.zhengxiangling.com/tags/django/"/>
    
      <category term="pillow" scheme="blog.zhengxiangling.com/tags/pillow/"/>
    
  </entry>
  
  <entry>
    <title>学习 vuex</title>
    <link href="blog.zhengxiangling.com/2018/02/13/%E5%AD%A6%E4%B9%A0-vuex/"/>
    <id>blog.zhengxiangling.com/2018/02/13/学习-vuex/</id>
    <published>2018-02-13T06:43:00.000Z</published>
    <updated>2019-10-30T08:13:41.556Z</updated>
    
    <content type="html"><![CDATA[<p>vuex 可以用来帮助我们管理全局的状态，以音乐播放器来举例。我们在播放音乐的时候，需要将音乐的信息保存到全局变量中，然后当点击其他页面的时候，音乐的信息保存有，就可以在其他页面自由切换，不至于点到其他页面的时候之前播放的音乐的信息就没有了。当想调用音乐信息的时候，从全局变量中调出即可。</p><p><a href="https://github.com/ElijahZheng/learn-vuex.git" target="_blank" rel="noopener">github 传送门</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;vuex 可以用来帮助我们管理全局的状态，以音乐播放器来举例。我们在播放音乐的时候，需要将音乐的信息保存到全局变量中，然后当点击其他页面的时候，音乐的信息保存有，就可以在其他页面自由切换，不至于点到其他页面的时候之前播放的音乐的信息就没有了。当想调用音乐信息的时候，从全局变
      
    
    </summary>
    
    
    
      <category term="vue" scheme="blog.zhengxiangling.com/tags/vue/"/>
    
      <category term="vuex" scheme="blog.zhengxiangling.com/tags/vuex/"/>
    
  </entry>
  
  <entry>
    <title>MongoDB 学习</title>
    <link href="blog.zhengxiangling.com/2018/01/29/MongoDB-%E5%AD%A6%E4%B9%A0/"/>
    <id>blog.zhengxiangling.com/2018/01/29/MongoDB-学习/</id>
    <published>2018-01-29T06:59:00.000Z</published>
    <updated>2019-10-30T08:13:41.546Z</updated>
    
    <content type="html"><![CDATA[<p>1.进入数据库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> mongo</span></span><br></pre></td></tr></table></figure><p>不进行任何操作的时候，默认使用的数据库为<code>test</code></p><p>2.创建或切换数据库    </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> use learndb</span></span><br><span class="line">switched to db learndb</span><br></pre></td></tr></table></figure><a id="more"></a><p>3.查看存在的数据库（只显示有数据的数据库）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> show databases </span></span><br><span class="line">or</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> show dbs</span></span><br><span class="line">admin    0.000GB</span><br><span class="line">config   0.000GB</span><br></pre></td></tr></table></figure><p>当向数据库<code>learndb</code>中插入数据时，<code>show dbs</code>才会显示<code>learndb</code>。</p><p>4.查看当前使用的数据库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> db</span></span><br><span class="line">learndb</span><br></pre></td></tr></table></figure><p>5.删除当前的数据库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">db.dropDatabase()</span><br><span class="line">&#123; "ok" : 1 &#125;</span><br></pre></td></tr></table></figure><p>6.创建数据库集合</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> db.createCollection(<span class="string">'myCol'</span>)</span></span><br><span class="line">&#123; "ok" : 1 &#125;</span><br></pre></td></tr></table></figure><p>创建时可以带参数<code>options</code></p><p>options参数是可选的，因此只需要指定集合的名称。 以下是可以使用的选项列表：</p><table><thead><tr><th>字段</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>capped</td><td>Boolean</td><td>(可选)如果为true，则启用封闭的集合。上限集合是固定大小的集合，它在达到其最大大小时自动覆盖其最旧的条目。 如果指定true，则还需要指定size参数。</td></tr><tr><td>autoIndexId</td><td>Boolean</td><td>(可选)如果为true，则在_id字段上自动创建索引。默认值为false。</td></tr><tr><td>size</td><td>数字</td><td>(可选)指定上限集合的最大大小(以字节为单位)。 如果capped为true，那么还需要指定此字段的值。</td></tr><tr><td>max</td><td>数字</td><td>(可选)指定上限集合中允许的最大文档数。</td></tr></tbody></table><p>例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> db.createCollection(<span class="string">"myCol2"</span>, &#123;capped : <span class="literal">true</span>, autoIndexId : <span class="literal">true</span>, size : 6142800, max : 10000 &#125;)</span></span><br><span class="line">&#123;</span><br><span class="line">"note" : "the autoIndexId option is deprecated and will be removed in a future release",</span><br><span class="line">"ok" : 1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>7.查看创建的集合</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> show collections</span></span><br><span class="line">myCol</span><br><span class="line">myCol2</span><br></pre></td></tr></table></figure><p>8.删除指定的集合 <code>db.collection.drop()</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> db.myCol2.drop()</span></span><br><span class="line">true</span><br></pre></td></tr></table></figure><p>9.插入文档 <code>db.collection.insert({})</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> db.myCol.insert(&#123;</span></span><br><span class="line">title: 'learn mongodb', </span><br><span class="line">url: 'https://blog.zhengxiangling.com',</span><br><span class="line">    view: '99'</span><br><span class="line">&#125;)</span><br><span class="line">WriteResult(&#123; "nInserted" : 1 &#125;)</span><br></pre></td></tr></table></figure><p>其他插入方法</p><ul><li>db.post.save(document)</li><li>db.collection.insertOne()</li><li>db.collection.insertMany()    </li></ul><p>10.查询集合 <code>db.collection.find()</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> db.myCol.find()</span></span><br><span class="line">&#123; "_id" : ObjectId("5a6eda148517fad4b57bd75e"), "title" : "learn mongodb", "url" : "https://blog.zhengxiangling.com", "view" : "99" &#125;</span><br></pre></td></tr></table></figure><p>结合<code>preey()</code>方法，格式化输出</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> db.myCol.find().pretty()</span></span><br><span class="line">&#123;</span><br><span class="line">"_id" : ObjectId("5a6eda148517fad4b57bd75e"),</span><br><span class="line">"title" : "learn mongodb",</span><br><span class="line">"url" : "https://blog.zhengxiangling.com",</span><br><span class="line">"view" : "99"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>加参数的查找</p><table><thead><tr><th>操作</th><th>语法</th><th>示例</th><th>RDBMS等效语句</th></tr></thead><tbody><tr><td>相等</td><td><code>{&lt;key&gt;:&lt;value&gt;}</code></td><td><code>db.mycol.find({&quot;by&quot;:&quot;yiibai&quot;}).pretty()</code></td><td><code>where by = &#39;yiibai&#39;</code></td></tr><tr><td>小于</td><td><code>{&lt;key&gt;:{$lt:&lt;value&gt;}}</code></td><td><code>db.mycol.find({&quot;likes&quot;:{$lt:50}}).pretty()</code></td><td><code>where likes &lt; 50</code></td></tr><tr><td>小于等于</td><td><code>{&lt;key&gt;:{$lte:&lt;value&gt;}}</code></td><td><code>db.mycol.find({&quot;likes&quot;:{$lte:50}}).pretty()</code></td><td><code>where likes &lt;= 50</code></td></tr><tr><td>大于</td><td><code>{&lt;key&gt;:{$gt:&lt;value&gt;}}</code></td><td><code>db.mycol.find({&quot;likes&quot;:{$gt:50}}).pretty()</code></td><td><code>where likes &gt; 50</code></td></tr><tr><td>大于等于</td><td><code>{&lt;key&gt;:{$gte:&lt;value&gt;}}</code></td><td><code>db.mycol.find({&quot;likes&quot;:{$gte:50}}).pretty()</code></td><td><code>where likes &gt;= 50</code></td></tr><tr><td>不等于</td><td><code>{&lt;key&gt;:{$ne:&lt;value&gt;}}</code></td><td><code>db.mycol.find({&quot;likes&quot;:{$ne:50}}).pretty()</code></td><td><code>where likes != 50</code></td></tr></tbody></table><p>结合<code>and</code>或者<code>or</code>查找</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">db.mycol.find(</span></span><br><span class="line">   &#123;</span><br><span class="line">      $and: [</span><br><span class="line">         &#123;key1: value1&#125;, &#123;key2:value2&#125;</span><br><span class="line">      ]</span><br><span class="line">   &#125;</span><br><span class="line">).pretty()</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">db.mycol.find(</span></span><br><span class="line">   &#123;</span><br><span class="line">      $or: [</span><br><span class="line">         &#123;key1: value1&#125;, &#123;key2:value2&#125;</span><br><span class="line">      ]</span><br><span class="line">   &#125;</span><br><span class="line">).pretty()</span><br></pre></td></tr></table></figure><p>设置查找到的文档要显示出的字段，如只显示<code>_id</code>和<code>title</code>，<code>1</code>表示显示</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.mycol.find(&#123;&#125;, &#123;'_id':1, 'title':1&#125;)</span><br></pre></td></tr></table></figure><p>11.更新文档 <code>update</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> db.myCol.update(&#123;title: <span class="string">'learn mongodb'</span>&#125;, &#123;<span class="variable">$set</span>: &#123;title: <span class="string">'update title'</span>&#125;&#125;)</span></span><br><span class="line">WriteResult(&#123; "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 &#125;)</span><br></pre></td></tr></table></figure><p>默认只会修改匹配到的第一个文档，若要修改所有匹配到的文档，将参数<code>multi</code>设置为<code>true</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> db.myCol.update(&#123;title: <span class="string">'learn mongodb'</span>&#125;, &#123;<span class="variable">$set</span>: &#123;title: <span class="string">'update title'</span>&#125;, &#123;multi: <span class="literal">true</span>&#125;&#125;)</span></span><br></pre></td></tr></table></figure><p>12.删除文档 <code>remove</code></p><p>删除匹配到的所有文档</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.myCol.remove(&#123;view: '99'&#125;)</span><br></pre></td></tr></table></figure><p>如果想只删除匹配到的第一条文档，加参数<code>1</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.myCol.remove(&#123;view: '99'&#125;, 1)</span><br></pre></td></tr></table></figure><p>把集合下的所有文档都删除</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.myCol.remove()</span><br></pre></td></tr></table></figure><p>13.限制记录数 <code>limit()</code>,<code>skip()</code><br>比如查询到的记录有10条，只想要前5条，可以用<code>limit()</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.myCol.find().limit(5)</span><br></pre></td></tr></table></figure><p>比如查询出的数据，不想要前3条，可以调过前三条的文档，可以用<code>skip()</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.myCol.find().skip(3)</span><br></pre></td></tr></table></figure><p>14.排序记录 <code>sort</code><br>可以多查询出的文档记录进行排序,<code>1</code>代表升序，<code>-1</code>代表降序。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">db.myCol.find().sort(&#123;'_id': 1&#125;)</span><br><span class="line"></span><br><span class="line">db.myCol.find().sort(&#123;'_id': -1&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;1.进入数据库&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; mongo&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;不进行任何操作的时候，默认使用的数据库为&lt;code&gt;test&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;2.创建或切换数据库    &lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; use learndb&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;switched to db learndb&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
    
      <category term="Mongo DB" scheme="blog.zhengxiangling.com/tags/Mongo-DB/"/>
    
      <category term="数据库" scheme="blog.zhengxiangling.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>web站点接入PayPal支付</title>
    <link href="blog.zhengxiangling.com/2018/01/25/web%E7%AB%99%E7%82%B9%E6%8E%A5%E5%85%A5PayPal%E6%94%AF%E4%BB%98/"/>
    <id>blog.zhengxiangling.com/2018/01/25/web站点接入PayPal支付/</id>
    <published>2018-01-25T10:38:00.000Z</published>
    <updated>2019-10-30T08:13:41.546Z</updated>
    
    <content type="html"><![CDATA[<p>官方教程：<br><a href="https://developer.paypal.com/docs/integration/direct/express-checkout/integration-jsv4/" target="_blank" rel="noopener">PayPal Express Checkout</a></p><p>根据官方教程整理了一下具体步骤。    </p><a id="more"></a><p>模板：    </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta http-equiv=<span class="string">"X-UA-Compatible"</span> content=<span class="string">"IE=edge"</span> /&gt;</span><br><span class="line">  &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width, initial-scale=1"</span>&gt;</span><br><span class="line">  &lt;script src=<span class="string">"https://www.paypalobjects.com/api/checkout.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;<span class="regexp">/head&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;body&gt;</span></span><br><span class="line"><span class="regexp">  &lt;div id="paypal-button"&gt;&lt;/</span>div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;script&gt;</span><br><span class="line">      paypal.Button.render(&#123;</span><br><span class="line">          locale: <span class="string">'zh_CN'</span>, <span class="comment">// or en_US</span></span><br><span class="line">          env: <span class="string">'production'</span>, <span class="comment">// or sandbox</span></span><br><span class="line"></span><br><span class="line">          commit: <span class="literal">true</span>, <span class="comment">// Show a 'Pay Now' button</span></span><br><span class="line">          client: &#123;</span><br><span class="line">              sandbox:    <span class="string">'***'</span>,</span><br><span class="line">              production: <span class="string">'***'</span></span><br><span class="line">          &#125;,</span><br><span class="line">          style: &#123;</span><br><span class="line">              size: <span class="string">'small'</span>,</span><br><span class="line">              color: <span class="string">'silver'</span>,</span><br><span class="line">              shape: <span class="string">'pill'</span>,</span><br><span class="line">              label: <span class="string">'checkout'</span>,</span><br><span class="line">              tagline: <span class="literal">false</span></span><br><span class="line">          &#125;,</span><br><span class="line"></span><br><span class="line">          payment: <span class="function"><span class="keyword">function</span>(<span class="params">data, actions</span>) </span>&#123;</span><br><span class="line">              <span class="keyword">return</span> actions.payment.create(&#123;</span><br><span class="line">                  payment: &#123;</span><br><span class="line">                      transactions: [</span><br><span class="line">                          &#123;</span><br><span class="line">                              amount: &#123; <span class="attr">total</span>: <span class="string">'填入金额'</span>, <span class="attr">currency</span>: <span class="string">'USD'</span> &#125;</span><br><span class="line">                          &#125;</span><br><span class="line">                      ]</span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;);</span><br><span class="line">          &#125;,</span><br><span class="line"></span><br><span class="line">          onAuthorize: <span class="function"><span class="keyword">function</span>(<span class="params">data, actions</span>) </span>&#123;</span><br><span class="line">              <span class="keyword">return</span> actions.payment.execute().then(<span class="function"><span class="keyword">function</span>(<span class="params">payment</span>) </span>&#123;</span><br><span class="line">                  $.ajax(&#123;</span><br><span class="line">                    type: <span class="string">'POST'</span>,</span><br><span class="line">                    url: <span class="string">'/'</span>,</span><br><span class="line">                    data: &#123;&#125;</span><br><span class="line">                  &#125;).done(<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">                      <span class="keyword">if</span> (data == <span class="string">'0'</span>) &#123;</span><br><span class="line">                          alert(<span class="string">'The payment is complete!'</span>);</span><br><span class="line">                          <span class="built_in">window</span>.location.reload();</span><br><span class="line">                      &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                          alert(<span class="string">'pay fail'</span>)</span><br><span class="line">                      &#125;</span><br><span class="line">                  &#125;)</span><br><span class="line">              &#125;);</span><br><span class="line">          &#125;,</span><br><span class="line"></span><br><span class="line">          onCancel: <span class="function"><span class="keyword">function</span>(<span class="params">data, actions</span>) </span>&#123;</span><br><span class="line">              <span class="comment">/*</span></span><br><span class="line"><span class="comment">               * Buyer cancelled the payment</span></span><br><span class="line"><span class="comment">               */</span></span><br><span class="line">          &#125;,</span><br><span class="line"></span><br><span class="line">          onError: <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">              <span class="comment">/*</span></span><br><span class="line"><span class="comment">              * An error occurred during the transaction</span></span><br><span class="line"><span class="comment">              */</span></span><br><span class="line">          &#125;</span><br><span class="line">      &#125;, <span class="string">'#paypal-button'</span>);</span><br><span class="line">  &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br></pre></td></tr></table></figure><h5 id="1-必须-js"><a href="#1-必须-js" class="headerlink" title="1. 必须 js"></a>1. 必须 js</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">"https://www.paypalobjects.com/api/checkout.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h5 id="2-支付按钮"><a href="#2-支付按钮" class="headerlink" title="2. 支付按钮"></a>2. 支付按钮</h5><p><code>&lt;div id=&quot;paypal-button&quot;&gt;&lt;/div&gt;</code>，<code>paypal.Button.render</code>绑定对应的id(也可以是class)。</p><h5 id="3-render-参数"><a href="#3-render-参数" class="headerlink" title="3. render 参数"></a>3. render 参数</h5><p>1)<code>env</code>： 运行环境<br>有两种：</p><table><thead><tr><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>sandbox</td><td>沙盒，用于测试，用添加的sandbox账号测试能否交易成功</td></tr><tr><td>production</td><td>生产环境，部署上线时使用的环境</td></tr></tbody></table><p>2)locale： 语言版本<br>配套有多国语言，中文选用 <code>zh_CN</code>，美式英文选用 <code>en_US</code></p><p>3）<code>client</code>： 客户端<code>id</code><br>获取方式：登录 -&gt; <a href="https://developer.paypal.com/developer/applications/" target="_blank" rel="noopener">Applications</a>  -&gt; 选择 REST API apps -&gt; create App<br><img src="https://cdn.zhengxiangling.com/18-1-25/637642.jpg" alt=""></p><p>创建成功后，可以从创建的应用获取<code>Sandbox</code> 和 <code>Live</code> 的 <code>client ID</code>，填入</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">client: &#123;</span><br><span class="line">  sandbox:    <span class="string">''</span>,</span><br><span class="line">  production: <span class="string">''</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>4)<code>style</code>： 定义支付按钮样式，参考 <a href="https://developer.paypal.com/docs/integration/direct/express-checkout/integration-jsv4/customize-button/" target="_blank" rel="noopener">Customize Checkout Button</a></p><p>5)触发函数：</p><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>payment</td><td>点击支付时触发，total填入需要支付的金额，currency填入支付的货币类型</td></tr><tr><td>onAuthorize</td><td>支付成功时触发，当支付成功时可以用Ajax提交数据修改订单支付状态为已支付。</td></tr><tr><td>onCancel</td><td>当用户关闭支付页面时触发</td></tr><tr><td>onError</td><td>当支付出错时触发</td></tr></tbody></table><h5 id="4-创建沙盒账号用于测试"><a href="#4-创建沙盒账号用于测试" class="headerlink" title="4. 创建沙盒账号用于测试"></a>4. 创建沙盒账号用于测试</h5><p><a href="https://developer.paypal.com/developer/accounts/" target="_blank" rel="noopener">Sandbox accounts</a><br>创建两个账号，BUSSINESS 以及 PERSONAL。<br>创建完成后登录沙盒账号测试是否登录成功（红线按钮登录）<br><img src="https://cdn.zhengxiangling.com/18-1-25/63582846.jpg" alt=""></p><h5 id="5-使用sandbox-账号测试支付"><a href="#5-使用sandbox-账号测试支付" class="headerlink" title="5. 使用sandbox 账号测试支付"></a>5. 使用sandbox 账号测试支付</h5><p>当<code>env</code>环境为<code>sandbox</code>时，点击支付按钮时，使用<code>PERSONAL</code>账号来登录支付（测试账号默认有余额 $9999），当支付成功时会调用函数<code>onAuthorize</code>,可以弹窗<code>alert(&#39;pay success&#39;)</code>来测试是否支付成功。若成功，上线时将<code>env</code>转为<code>production</code>环境即可。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;官方教程：&lt;br&gt;&lt;a href=&quot;https://developer.paypal.com/docs/integration/direct/express-checkout/integration-jsv4/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;PayPal Express Checkout&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;根据官方教程整理了一下具体步骤。    &lt;/p&gt;
    
    </summary>
    
    
    
      <category term="PayPal" scheme="blog.zhengxiangling.com/tags/PayPal/"/>
    
      <category term="支付" scheme="blog.zhengxiangling.com/tags/%E6%94%AF%E4%BB%98/"/>
    
  </entry>
  
  <entry>
    <title>express 搭建后台</title>
    <link href="blog.zhengxiangling.com/2018/01/18/express-%E6%90%AD%E5%BB%BA%E5%90%8E%E5%8F%B0/"/>
    <id>blog.zhengxiangling.com/2018/01/18/express-搭建后台/</id>
    <published>2018-01-18T01:52:00.000Z</published>
    <updated>2019-10-30T08:13:41.546Z</updated>
    
    <content type="html"><![CDATA[<p>安装 express</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">express sudo cnpm i express -g</span><br></pre></td></tr></table></figure><p>安装 express 生成器 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install express-generator -g</span><br></pre></td></tr></table></figure><p>安装 mongodb 数据库 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#mac</span><br><span class="line">brew install mongodb</span><br></pre></td></tr></table></figure><a id="more"></a><p><a href="https://github.com/StevenSLXie/Tutorials-for-Web-Developers/blob/master/MongoDB%20%E6%9E%81%E7%AE%80%E5%AE%9E%E8%B7%B5%E5%85%A5%E9%97%A8.md" target="_blank" rel="noopener">MongoDB 极简实践入门</a></p><p>启动mongodb 的方式</p><figure class="highlight plain"><figcaption><span>js </span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mongod —config /usr/local/etc/mongod.conf</span><br><span class="line">(登录权限需要自行设置)</span><br></pre></td></tr></table></figure><p>下载 mongodb GUI 工具 Robo 3T<br>自行安装</p><p>安装 mongoose<br>node.js异步环境下对mongodb进行便捷操作的对象模型工具</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install mongoose --save</span><br></pre></td></tr></table></figure><p>创建一个名为server的应用    </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">express server</span><br></pre></td></tr></table></figure><p>安装依赖</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd server</span><br><span class="line">cnpm install</span><br></pre></td></tr></table></figure><p>启动应用的方式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># Mac or Linux</span><br><span class="line">DEBUG=myapp npm start </span><br><span class="line"># Windows</span><br><span class="line"><span class="keyword">set</span> DEBUG=myapp &amp; npm start</span><br></pre></td></tr></table></figure><p>操作mongodb，增加数据库myapp及集合goods</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 增加数据库</span><br><span class="line">use myapp</span><br><span class="line"></span><br><span class="line"># 插入数据</span><br><span class="line">db.goods.insert(&#123;<span class="string">'name'</span>: <span class="string">'apple'</span>, <span class="string">'price'</span>: <span class="string">'5'</span>&#125;)</span><br></pre></td></tr></table></figure><p>在server目录下创建文件夹，用于保存模型models<br>如：<br>创建一个goods模型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">goods.js</span><br><span class="line"><span class="keyword">let</span> mongoose = <span class="built_in">require</span>(<span class="string">'mongoose'</span>);</span><br><span class="line"><span class="keyword">let</span> Schema = mongoose.Schema;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> productSchema = <span class="keyword">new</span> Schema(&#123;</span><br><span class="line">    <span class="string">'name'</span>: <span class="built_in">String</span>,</span><br><span class="line">    <span class="string">'price'</span>: <span class="built_in">Number</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">module</span>.exports = mongoose.model(<span class="string">'Good'</span>, productSchema);</span><br><span class="line"><span class="comment">// 会自动将Good与goods集合相匹配，或者可以用下面的方法指定需要匹配的集合</span></span><br><span class="line"><span class="comment">//module.exports = mongoose.model('Good', productSchema, 'goods');</span></span><br></pre></td></tr></table></figure><p>然后在router中查询goods的数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> router = express.Router();</span><br><span class="line"><span class="keyword">var</span> mongoose = <span class="built_in">require</span>(<span class="string">'mongoose'</span>);</span><br><span class="line"><span class="keyword">var</span> Goods = <span class="built_in">require</span>(<span class="string">'../models/goods'</span>);</span><br><span class="line"><span class="comment">//连接数据库</span></span><br><span class="line"><span class="comment">// mongoose.connect('mongodb://127.0.0.1:27017/myapp');</span></span><br><span class="line">mongoose.connect(<span class="string">'mongodb://localhost/konggu'</span>);</span><br><span class="line">mongoose.connection.on(<span class="string">'connected'</span>, () =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'MongoDB connected success.'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">mongoose.connection.on(<span class="string">'error'</span>, () =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'MongoDB connected fail.'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">mongoose.connection.on(<span class="string">'disconnected'</span>, () =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'MongoDB connected disconneted.'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">router.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// res.send('respond with a resource of goods');</span></span><br><span class="line">    Goods.find(&#123;&#125;, (err, doc) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">            res.json(&#123;</span><br><span class="line">                status: <span class="string">'1'</span>,</span><br><span class="line">                mes: err.message</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            res.json(&#123;</span><br><span class="line">                status: <span class="string">'0'</span>,</span><br><span class="line">                msg: <span class="string">'success'</span>,</span><br><span class="line">                result: &#123;</span><br><span class="line">                    count: doc.length,</span><br><span class="line">                    list: doc</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = router;</span><br></pre></td></tr></table></figure><p>chrome json格式化插件<br><a href="https://github.com/gildas-lormeau/JSONView-for-Chrome" target="_blank" rel="noopener">jsonview</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;安装 express&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;express sudo cnpm i express -g&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;安装 express 生成器 &lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;cnpm install express-generator -g&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;安装 mongodb 数据库 &lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;#mac&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;brew install mongodb&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
    
      <category term="node" scheme="blog.zhengxiangling.com/tags/node/"/>
    
      <category term="express" scheme="blog.zhengxiangling.com/tags/express/"/>
    
      <category term="vue" scheme="blog.zhengxiangling.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>如何在邮件中写html</title>
    <link href="blog.zhengxiangling.com/2017/12/21/%E5%A6%82%E4%BD%95%E5%9C%A8%E9%82%AE%E4%BB%B6%E4%B8%AD%E5%86%99html/"/>
    <id>blog.zhengxiangling.com/2017/12/21/如何在邮件中写html/</id>
    <published>2017-12-21T10:43:31.000Z</published>
    <updated>2019-10-30T08:13:41.556Z</updated>
    
    <content type="html"><![CDATA[<p>当我们需要在邮件中显示想要的自己定义的格式的时候，就需要在 email 中编写 html，以下将列举一些制作过程中个人的一些总结。</p><a id="more"></a><p>1.Doctype<br>使用这个是为了兼容性，但是就意味着不能使用HTML5。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/1999/xhtml"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Google Email<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.布局<br>全局使用table进行布局</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">style</span>=<span class="string">"margin:0;padding:0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">width</span>=<span class="string">"680"</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">"680"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">tbody</span>&gt;</span><span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3.样式写在标签里面，图片统一用外链引入</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"http://ou1bzq6p5.bkt.clouddn.com/icon_date@2x.png"</span> <span class="attr">alt</span>=<span class="string">"date: "</span> <span class="attr">style</span>=<span class="string">"width:35px;height:35px;vertical-align:middle"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>4.不同邮件服务商对邮件的支持程度不同，注意兼容性问题。<br>1)页面宽度请设定在600到800px（像素）以内，高度根据内容的需求调整高度。</p><p>2)html代码在15kb以内。    </p><p>3)单张图片尺寸不要超过1728px,否则outlook显示不全。</p><p>4)邮件内容图文比例4:6，否则容易进入垃圾箱。    </p><p>5)table标签上如果不需要边框和间距请加上 border=”0” cellpadding=”0” cellspacing=”0”    </p><p>6)文字行高line-height、元素间距要定义在块状元素上（p、td、h、li等）才能起作用。    </p><p>7)尽量写行内样式。        </p><p>8)不要使用背景图片或gif动态图。</p><p>9)尽量不要用float、position来写邮件效果。</p><p>10)邮件中的按钮尽量不要用图片，可写个一行一列的表格，里面放个a标签。可能发到客户邮箱未被允许加载图片。    </p><p>11)img标签要给alt属性，再图片未加载的情况，这个提示的文字就会显示比较重要。    </p><p>12)一定要给p标签和h系列标签指定一个margin和padding（也可全都设置margin:0;padding:0;），不然不同的邮箱收到的邮件，间距不一致。font-size、font-weight也要指定，不然显示也不一致。</p><p>13)英文、数字不折行显示的话，给包裹的td加上word-break:break-all。</p><p>14)Outlook会自动为table cell 添加1px border，请在邮件顶部的内联样式中加上 table td { border-collapse: collapse; }    </p><p>5.当使用响应式布局时，参考地址<br><a href="https://www.emailonacid.com/blog/article/email-development/emailology_a_free_responsive_email_template_using_media_queries_-_part_i/" target="_blank" rel="noopener">Free Responsive Email Template</a>    </p><p>1响应式设计可使用@media 媒体查询语句或百分比布局。</p><p>2)移动设备邮件模板宽度建议480px。</p><p>3)模板通常是1－3列式布局，推荐1-2列式。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;当我们需要在邮件中显示想要的自己定义的格式的时候，就需要在 email 中编写 html，以下将列举一些制作过程中个人的一些总结。&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>three.js 初识</title>
    <link href="blog.zhengxiangling.com/2017/11/30/three-js-%E5%88%9D%E8%AF%86/"/>
    <id>blog.zhengxiangling.com/2017/11/30/three-js-初识/</id>
    <published>2017-11-30T06:07:00.000Z</published>
    <updated>2019-10-30T08:13:41.546Z</updated>
    
    <content type="html"><![CDATA[<p>什么是threejs，很简单，你将它理解成three + js就可以了。three表示3D的意思，js表示javascript的意思。那么合起来，three.js就是使用javascript 来写3D程序的意思。</p><a id="more"></a><p>在Three.js中，要渲染物体到网页中，我们需要3个组建：场景（scene）、相机（camera）和渲染器（renderer）。有了这三样东西，才能将物体渲染到网页中去。</p><p>创建这三要素的代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> scene = <span class="keyword">new</span> THREE.Scene();  <span class="comment">// 场景</span></span><br><span class="line"><span class="keyword">var</span> camera = <span class="keyword">new</span> THREE.PerspectiveCamera(<span class="number">75</span>, <span class="built_in">window</span>.innerWidth/<span class="built_in">window</span>.innerHeight, <span class="number">0.1</span>, <span class="number">1000</span>);<span class="comment">// 透视相机</span></span><br><span class="line"><span class="keyword">var</span> renderer = <span class="keyword">new</span> THREE.WebGLRenderer();   <span class="comment">// 渲染器</span></span><br><span class="line">renderer.setSize(<span class="built_in">window</span>.innerWidth, <span class="built_in">window</span>.innerHeight);    <span class="comment">// 设置渲染器的大小为窗口的内宽度，也就是内容区的宽度</span></span><br><span class="line"><span class="built_in">document</span>.body.appendChild(renderer.domElement);</span><br></pre></td></tr></table></figure><p>场景是所有物体的容器，如果要显示一个苹果，就需要将苹果对象加入场景中。</p><p>相机，相机决定了场景中那个角度的景色会显示出来。相机就像人的眼睛一样，人站在不同位置，抬头或者低头都能够看到不同的景色。场景只有一种，但是相机却又很多种。</p><p>渲染器决定了渲染的结果应该画在页面的什么元素上面，并且以怎样的方式来绘制。</p><p>点</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> point1 = <span class="keyword">new</span> THREE.Vector3();</span><br><span class="line"></span><br><span class="line">point1.set(<span class="number">4</span>,<span class="number">8</span>,<span class="number">9</span>);</span><br></pre></td></tr></table></figure><p>线 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> geometry = <span class="keyword">new</span> THREE.Geometry();</span><br><span class="line"><span class="keyword">var</span> material = <span class="keyword">new</span> THREE.LineBasicMaterial( &#123; <span class="attr">vertexColors</span>: <span class="literal">true</span> &#125; );</span><br><span class="line"><span class="keyword">var</span> color1 = <span class="keyword">new</span> THREE.Color( <span class="number">0x444444</span> ), color2 = <span class="keyword">new</span> THREE.Color( <span class="number">0xFF0000</span> );</span><br><span class="line"></span><br><span class="line"><span class="comment">// 线的材质可以由2点的颜色决定</span></span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> THREE.Vector3( <span class="number">-100</span>, <span class="number">0</span>, <span class="number">100</span> );</span><br><span class="line"><span class="keyword">var</span> p2 = <span class="keyword">new</span> THREE.Vector3(  <span class="number">100</span>, <span class="number">0</span>, <span class="number">-100</span> );</span><br><span class="line">geometry.vertices.push(p1);</span><br><span class="line">geometry.vertices.push(p2);</span><br><span class="line">geometry.colors.push( color1, color2 );</span><br><span class="line"><span class="keyword">var</span> line = <span class="keyword">new</span> THREE.Line( geometry, material, THREE.LinePieces );</span><br><span class="line">scene.add(line);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> geometry = <span class="keyword">new</span> THREE.Geometry();</span><br></pre></td></tr></table></figure><p>几何体里面有一个vertices变量，可以用来存放点。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">LineBasicMaterial( parameters )</span><br><span class="line"></span><br><span class="line">Parameters是一个定义材质外观的对象，它包含多个属性来定义材质，这些属性是：</span><br><span class="line"></span><br><span class="line">Color：线条的颜色，用<span class="number">16</span>进制来表示，默认的颜色是白色。</span><br><span class="line"></span><br><span class="line">Linewidth：线条的宽度，默认时候<span class="number">1</span>个单位宽度。</span><br><span class="line"></span><br><span class="line">Linecap：线条两端的外观，默认是圆角端点，当线条较粗的时候才看得出效果，如果线条很细，那么你几乎看不出效果了。</span><br><span class="line"></span><br><span class="line">Linejoin：两个线条的连接点处的外观，默认是“round”，表示圆角。</span><br><span class="line"></span><br><span class="line">VertexColors：定义线条材质是否使用顶点颜色，这是一个boolean值。意思是，线条各部分的颜色会根据顶点的颜色来进行插值。（如果关于插值不是很明白，可以QQ问我，QQ在前言中你一定能够找到，嘿嘿，虽然没有明确写出）。</span><br><span class="line"></span><br><span class="line">Fog：定义材质的颜色是否受全局雾效的影响。</span><br><span class="line"></span><br><span class="line">好了，介绍完这些参数，你可以试一试了，在课后，我们会展示不同同学的杰出作品。下面，接着上面的讲，我们这里使用了顶点颜色vertexColors: THREE.VertexColors，就是线条的颜色会根据顶点来计算。</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> material = <span class="keyword">new</span> THREE.LineBasicMaterial( &#123; <span class="attr">vertexColors</span>: THREE.VertexColors &#125; );</span><br></pre></td></tr></table></figure><p>改变视角，让画面动起来</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">animation</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// renderer.clear()</span></span><br><span class="line">  camera.position.x = camera.position.x + <span class="number">1</span></span><br><span class="line">  renderer.render(scene, camera)</span><br><span class="line">  requestAnimationFrame(animation)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*** 场景（scene） ***/</span></span><br><span class="line"><span class="keyword">var</span> scene = <span class="keyword">new</span> THREE.Scene(); <span class="comment">// 创建场景</span></span><br><span class="line">scene.add(x);                  <span class="comment">// 插入场景</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*** 相机（camera） ***/</span></span><br><span class="line"><span class="comment">// 正交投影相机</span></span><br><span class="line"><span class="keyword">var</span> camera = <span class="keyword">new</span> THREE.OrthographicCamera(left, right, top, bottom, near, far);</span><br><span class="line"><span class="comment">// 透视头像相机</span></span><br><span class="line"><span class="keyword">var</span> camera = <span class="keyword">new</span> THREE.PerspectiveCamera(fov, aspect, near, far); <span class="comment">// fov：人眼夹角，aspect：长宽比</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*** 渲染器（renderer） ***/</span></span><br><span class="line"><span class="keyword">var</span> renderer = <span class="keyword">new</span> THREE.WebGLRenderer(options);</span><br><span class="line"><span class="comment">// options &#123;&#125; 可选。参数：</span></span><br><span class="line"><span class="comment">// canvas：element &lt;canvas&gt;&lt;/canvas&gt;</span></span><br><span class="line">renderer.setSize(长, 宽);</span><br><span class="line">element.appendChild(renderer.domElement); <span class="comment">// 插入节点</span></span><br><span class="line">renderer.setClearColor(color, opacity);   <span class="comment">// 设置清除后的颜色 16进制</span></span><br><span class="line">renderer.clear();                         <span class="comment">// 清除面板</span></span><br><span class="line">renderer.render(scene, camera);           <span class="comment">// 渲染</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*** 光照(light) ***/</span></span><br><span class="line"><span class="keyword">new</span> THREE.AmbientLight(颜色);                          <span class="comment">// 环境光</span></span><br><span class="line"><span class="keyword">new</span> THREE.PointLight(颜色, 强度, 距离);                <span class="comment">// 点光源</span></span><br><span class="line"><span class="keyword">new</span> THREE.DirectionalLight(颜色, 亮度);                <span class="comment">// 平行光</span></span><br><span class="line"><span class="keyword">new</span> THREE.SpotLight(颜色, 强度, 距离, 夹角, 衰减指数); <span class="comment">// 聚光灯</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*** 几何形状 ***/</span></span><br><span class="line"><span class="keyword">new</span> THREE.CubeGeometry(长, 宽, 高, 长的分割, 宽的分割, 高的分割);                           <span class="comment">// 立方体</span></span><br><span class="line"><span class="keyword">new</span> THREE.PlanGeometry(长,宽, 长的分割, 宽的分割);                                          <span class="comment">// 平面</span></span><br><span class="line"><span class="keyword">new</span> THREE.SphereGeometry(半径, 经度切片, 纬度分割, 经度分割, 经度跨过, 纬度开始, 纬度跨过); <span class="comment">// 球体</span></span><br><span class="line"><span class="keyword">new</span> THREE.CircleGeometry(半径, 切片数, 开始, 跨过角度);                                     <span class="comment">// 圆形</span></span><br><span class="line"><span class="keyword">new</span> THREE.CylinderGeometry(顶部面积, 底部面积, 高, 圆分割, 高分割, 是否没有顶面和底面);     <span class="comment">// 圆台</span></span><br><span class="line"><span class="keyword">new</span> THREE.TetrahedronGeometry(半径, 细节);  <span class="comment">// 正四边形</span></span><br><span class="line"><span class="keyword">new</span> THREE.OctahedronGeometry(半径, 细节);   <span class="comment">// 正八边形</span></span><br><span class="line"><span class="keyword">new</span> THREE.IconsahedronGeometry(半径, 细节); <span class="comment">// 正十二边形</span></span><br><span class="line"><span class="keyword">new</span> THREE.TorusGeometry(半径, 管道半径, 纬度分割, 经度分割, 圆环面的弧度); <span class="comment">// 圆环面</span></span><br><span class="line"><span class="comment">// 自定义形状</span></span><br><span class="line"><span class="keyword">var</span> geometry = <span class="keyword">new</span> THREE.Geometry();</span><br><span class="line">geometry.vertices.push(<span class="keyword">new</span> THREE.Vectory3(x, y, z)); <span class="comment">// 点，其中x、y、z为坐标</span></span><br><span class="line">geometry.faces.push(<span class="keyword">new</span> THREE.Faces3(x, y, z));      <span class="comment">// 面，其中x、y、z为点的数组的索引，三点确定一个面</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*** 材质 ***/</span></span><br><span class="line"><span class="keyword">new</span> THREE.MeshBasicMaterial(options); <span class="comment">// 基本材质</span></span><br><span class="line"><span class="comment">// options &#123;&#125; 可选。参数：</span></span><br><span class="line"><span class="comment">//   visible：是否可见</span></span><br><span class="line"><span class="comment">//     color：颜色</span></span><br><span class="line"><span class="comment">// wireframe: 是否渲染线而非面</span></span><br><span class="line"><span class="comment">//      side：THREE.FrontSide 正面，THREE.BackSide 反面，THREE.DoubleSide 双面</span></span><br><span class="line"><span class="comment">//       map: 贴图</span></span><br><span class="line"><span class="keyword">new</span> THREE.MeshLambertMaterial(options); <span class="comment">// Lambert材质，适合光照</span></span><br><span class="line"><span class="comment">//  ambient：反射能力</span></span><br><span class="line"><span class="comment">// emissive：自发光颜色</span></span><br><span class="line"><span class="keyword">new</span> THREE.MeshPhongMaterial();  <span class="comment">// Phong材质，适合金属和镜面</span></span><br><span class="line"><span class="comment">//  specular：光罩颜色</span></span><br><span class="line"><span class="comment">// shininess：光斑大小（值越大，光斑越小）</span></span><br><span class="line"><span class="keyword">new</span> THREE.MeshNormalMaterial(); <span class="comment">// 方向材质</span></span><br><span class="line"><span class="comment">/* 贴图 */</span></span><br><span class="line"><span class="keyword">var</span> texture = THREE.ImageUtils.loadTexture(url, &#123;&#125;, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;); <span class="comment">// 载入单个贴图（建议贴图的长宽为256的倍数）</span></span><br><span class="line"><span class="keyword">new</span> THREE.MeshFaceMaterial() <span class="comment">// 设置不同面的贴图，参数为单个贴图的数组</span></span><br><span class="line">texture.wrapS texture.wrapT = THREE.RepeatWrapping <span class="comment">// 贴图的重复方式</span></span><br><span class="line">texture.repeat.set(x, y)     <span class="comment">// 重复次数</span></span><br><span class="line"><span class="keyword">new</span> THREE.texture(canvas)    <span class="comment">// 将canvas作为贴图</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*** 将模型和贴图结合 ***/</span></span><br><span class="line"><span class="keyword">var</span> mesh = <span class="keyword">new</span> THREE.Mesh(形状, 材质);</span><br><span class="line">mesh.position <span class="comment">// 位置 mesh.position.x（y、z） 或 mesh.position.set(x, y, z)</span></span><br><span class="line">mesh.scale    <span class="comment">// 缩放</span></span><br><span class="line">mesh.rotation <span class="comment">// 旋转</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*** 监视FPS ***/</span></span><br><span class="line"><span class="keyword">var</span> stats = <span class="keyword">new</span> Stats();</span><br><span class="line">stats.domElement <span class="comment">// 节点</span></span><br><span class="line">stats.begin()    <span class="comment">// 开始</span></span><br><span class="line">stats.end()      <span class="comment">// 结束</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;什么是threejs，很简单，你将它理解成three + js就可以了。three表示3D的意思，js表示javascript的意思。那么合起来，three.js就是使用javascript 来写3D程序的意思。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="three" scheme="blog.zhengxiangling.com/tags/three/"/>
    
      <category term="图形学" scheme="blog.zhengxiangling.com/tags/%E5%9B%BE%E5%BD%A2%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>电子邮件的实现之IMAP（Java版）</title>
    <link href="blog.zhengxiangling.com/2017/11/25/%E7%94%B5%E5%AD%90%E9%82%AE%E4%BB%B6%E7%9A%84%E5%AE%9E%E7%8E%B0%E4%B9%8BIMAP%EF%BC%88Java%E7%89%88%EF%BC%89/"/>
    <id>blog.zhengxiangling.com/2017/11/25/电子邮件的实现之IMAP（Java版）/</id>
    <published>2017-11-25T03:05:00.000Z</published>
    <updated>2019-10-30T08:13:41.556Z</updated>
    
    <content type="html"><![CDATA[<p>IMAP（Internet Mail Access Protocol，Internet邮件访问协议）以前称作交互邮件访问协议（Interactive Mail Access Protocol）。IMAP是斯坦福大学在1986年开发的一种邮件获取协议。它的主要作用是邮件客户端（例如MS Outlook Express)可以通过这种协议从邮件服务器上获取邮件的信息，下载邮件等。当前的权威定义是RFC3501。IMAP协议运行在TCP/IP协议之上，使用的端口是143。它与POP3协议的主要区别是用户可以不用把所有的邮件全部下载，可以通过客户端直接对服务器上的邮件进行操作。</p><a id="more"></a><p>与POP3协议类似，IMAP（Internet消息访问协议）也是提供面向用户的邮件收取服务。常用的版本是IMAP4。<br>IMAP4改进了POP3的不足，用户可以通过浏览信件头来决定是否收取、删除和检索邮件的特定部分，还可以在服务器上创建或更改文件夹或邮箱。它除了支持POP3协议的脱机操作模式外，还支持联机操作和断连接操作。它为用户提供了有选择的从邮件服务器接收邮件的功能、基于服务器的信息处理功能和共享信箱功能。IMAP4的脱机模式不同于POP3，它不会自动删除在邮件服务器上已取出的邮件，其联机模式和断连接模式也是将邮件服务器作为“远程文件服务器”进行访问，更加灵活方便。IMAP4支持多个邮箱。<br>IMAP4的这些特性非常适合在不同的计算机或终端之间操作邮件的用户（例如你可以在手机、PAD、PC上的邮件代理程序操作同一个邮箱），以及那些同时使用多个邮箱的用户。</p><p>各参数返回的邮件信息：</p><table><thead><tr><th>参数</th><th>代表信息</th></tr></thead><tbody><tr><td>ALL</td><td>只返回按照一定格式的邮件摘要，包括邮件标志、RFC822.SIZE、自身的时间和信封信息。IMAP客户机能够将标准邮件解析成这些信息并显示出来。</td></tr><tr><td>BODY</td><td>只返回邮件体文本格式和大小的摘要信息。IMAP客户机可以识别这些细腻，并向用户显示详细的关于邮件的信息。其实是一些非扩展的BODYSTRUCTURE的信息。</td></tr><tr><td>FAST</td><td>只返回邮件的一些摘要，包括邮件标志、RFC822.SIZE、和自身的时间。</td></tr><tr><td>FULL</td><td>同样的还是一些摘要信息，包括邮件标志、RFC822.SIZE、自身的时间和BODYSTRUCTURE的信息。</td></tr><tr><td>BODYSTRUCTUR</td><td>是邮件的[MIME-IMB]的体结构。这是服务器通过解析[RFC-2822]头中的[MIME-IMB]各字段和[MIME-IMB]头信息得出来 的。包括的内容有：邮件正文的类型、字符集、编码方式等和各附件的类型、字符集、编码方式、文件名称等等。</td></tr><tr><td>ENVELOPE</td><td>信息的信封结构。是服务器通过解析[RFC-2822]头中的[MIME-IMB]各字段得出来的，默认各字段都是需要的。主要包括：自身的时间、附件数、收件人、发件人等。</td></tr><tr><td>FLAGS</td><td>此邮件的标志。</td></tr><tr><td>INTERNALDATE</td><td>自身的时间。</td></tr><tr><td>RFC822.SIZE</td><td>邮件的[RFC-2822]大小</td></tr><tr><td>RFC822.HEADER</td><td>在功能上等同于BODY.PEEK[HEADER]，</td></tr><tr><td>RFC822</td><td>功能上等同于BODY[]。</td></tr><tr><td>RFC822.TEXT</td><td>功能上等同于BODY[TEXT]</td></tr><tr><td>UID</td><td>返回邮件的UID号，UID号是唯一标识邮件的一个号码。</td></tr><tr><td>BODY[section] <code>&lt;&lt;partial&gt;&gt;</code></td><td>返回邮件的中的某一指定部分，返回的部分用section来表示，section部分包含的信息通常是 代表某一部分的一个数字或者是下面的某一个部分：HEADER, HEADER.FIELDS, HEADER.FIELDS.NOT, MIME, and TEXT。如果section部分是空的话，那就代表返回全部的信息，包括头信息。</td></tr><tr><td>BODY[HEADER]</td><td>返回完整的文件头信息。</td></tr><tr><td>BODY[HEADER.FIELDS ()]</td><td>在小括号里面可以指定返回的特定字段。</td></tr><tr><td>BODY[HEADER.FIELDS.NOT ()]</td><td>在小括号里面可以指定不需要返回的特定字段。</td></tr><tr><td>BODY[MIME]</td><td>返回邮件的[MIME-IMB]的头信息，在正常情况下跟BODY[HEADER]没有区别。</td></tr><tr><td>BODY[TEXT]</td><td>返回整个邮件体，这里的邮件体并不包括邮件头。</td></tr></tbody></table><p>代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">package IMAP;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.mail.Folder;</span><br><span class="line"><span class="keyword">import</span> javax.mail.Message;</span><br><span class="line"><span class="keyword">import</span> javax.mail.Session;</span><br><span class="line"><span class="keyword">import</span> javax.mail.Store;</span><br><span class="line"><span class="keyword">import</span> javax.mail.internet.MimeMessage;</span><br><span class="line"><span class="keyword">import</span> javax.mail.internet.MimeUtility;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> POP3.POP3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.mail.imap.IMAPMessage;</span><br><span class="line"></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">IMAP</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">public <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="built_in">String</span>[] args) throws Exception &#123;</span><br><span class="line"><span class="comment">// 准备连接服务器的会话信息</span></span><br><span class="line">Properties props = <span class="keyword">new</span> Properties();</span><br><span class="line">props.setProperty(<span class="string">"mail.store.protocol"</span>, <span class="string">"imap"</span>);</span><br><span class="line">props.setProperty(<span class="string">"mail.imap.host"</span>, <span class="string">"imap.sina.cn"</span>);</span><br><span class="line">props.setProperty(<span class="string">"mail.imap.port"</span>, <span class="string">"143"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建Session实例对象</span></span><br><span class="line">Session session = Session.getInstance(props);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建IMAP协议的Store对象</span></span><br><span class="line">Store store = session.getStore(<span class="string">"imap"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 连接邮件服务器</span></span><br><span class="line">store.connect(<span class="string">"your_name@sina.cn"</span>, <span class="string">"your_password"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获得收件箱</span></span><br><span class="line">Folder folder = store.getFolder(<span class="string">"INBOX"</span>);</span><br><span class="line"><span class="comment">// 以读写模式打开收件箱</span></span><br><span class="line">folder.open(Folder.READ_WRITE);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获得收件箱的邮件列表</span></span><br><span class="line">Message[] messages = folder.getMessages();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印不同状态的邮件数量</span></span><br><span class="line">System.out.println(<span class="string">"收件箱中共"</span> + messages.length + <span class="string">"封邮件!"</span>);</span><br><span class="line">System.out.println(<span class="string">"收件箱中共"</span> + folder.getUnreadMessageCount() + <span class="string">"封未读邮件!"</span>);</span><br><span class="line">System.out.println(<span class="string">"收件箱中共"</span> + folder.getNewMessageCount() + <span class="string">"封新邮件!"</span>);</span><br><span class="line">System.out.println(<span class="string">"收件箱中共"</span> + folder.getDeletedMessageCount()</span><br><span class="line">+ <span class="string">"封已删除邮件!"</span>);</span><br><span class="line"></span><br><span class="line">System.out</span><br><span class="line">.println(<span class="string">"------------------------开始解析邮件----------------------------------"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解析邮件</span></span><br><span class="line"><span class="keyword">for</span> (int i = <span class="number">0</span>, count = <span class="number">2</span>; i &lt; count; i++) &#123;</span><br><span class="line">MimeMessage msg = (MimeMessage) messages[i];</span><br><span class="line"><span class="built_in">String</span> subject = MimeUtility.decodeText(msg.getSubject());</span><br><span class="line">System.out.println(<span class="string">"["</span> + subject + <span class="string">"]未读，是否需要阅读此邮件（yes/no）？"</span>);</span><br><span class="line">POP3.parseMessage(msg); <span class="comment">// 解析邮件</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 关闭资源</span></span><br><span class="line">folder.close(<span class="literal">false</span>);</span><br><span class="line">store.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参数分析</p><p>版本4rev1（IMAP4rev1）允许一个客户端访问和操作在一个服务器上的电子邮件。<br>SELECT INBOX： 选择收件箱<br>EXISTS： 3封存在<br>FETCH<code>&lt;mail id&gt;&lt;datanames&gt;</code><br>ENVELOPE：信息的信封结构。<br>INTERNALDATE：自身的时间。<br>RFC822.SIZE：邮件的[RFC-2822]大小。<br>BODYSTRUCTUR： 是邮件的[MIME-IMB]的体结构。这是服务器通过解析[RFC-2822]头中的[MIME-IMB]各字段和[MIME-IMB]头信息得出来 的。包括的内容有：邮件正文的类型、字符集、编码方式等。<br>BODY[TEXT]：返回整个邮件体，这里的邮件体并不包括邮件头。<br>FLAGS：此邮件的标志。<br>EXAMINE：以只读方式打开邮箱，参数是需要打开的邮箱的名字，使用EXAMINE命令打开的邮箱不允许对邮件进行改动，因此不能增加或删除邮件的标志。<br>CLOSE：表示Client结束对当前Folder（文件夹/邮箱）的访问，关闭邮箱该邮箱中所有标志为、DELETED的邮件就被从物理上删除。CLOSE没有命令参数。随后可以SELECT另一Folder。<br>LOGOUT：结束本次IMAP会话。    </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;IMAP（Internet Mail Access Protocol，Internet邮件访问协议）以前称作交互邮件访问协议（Interactive Mail Access Protocol）。IMAP是斯坦福大学在1986年开发的一种邮件获取协议。它的主要作用是邮件客户端（例如MS Outlook Express)可以通过这种协议从邮件服务器上获取邮件的信息，下载邮件等。当前的权威定义是RFC3501。IMAP协议运行在TCP/IP协议之上，使用的端口是143。它与POP3协议的主要区别是用户可以不用把所有的邮件全部下载，可以通过客户端直接对服务器上的邮件进行操作。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="电子邮件" scheme="blog.zhengxiangling.com/tags/%E7%94%B5%E5%AD%90%E9%82%AE%E4%BB%B6/"/>
    
      <category term="Java" scheme="blog.zhengxiangling.com/tags/Java/"/>
    
      <category term="IMAP" scheme="blog.zhengxiangling.com/tags/IMAP/"/>
    
  </entry>
  
  <entry>
    <title>电子邮件的实现之 POP3（Java版）</title>
    <link href="blog.zhengxiangling.com/2017/11/25/%E7%94%B5%E5%AD%90%E9%82%AE%E4%BB%B6%E7%9A%84%E5%AE%9E%E7%8E%B0%E4%B9%8B-POP3%EF%BC%88Java%E7%89%88%EF%BC%89/"/>
    <id>blog.zhengxiangling.com/2017/11/25/电子邮件的实现之-POP3（Java版）/</id>
    <published>2017-11-25T02:47:00.000Z</published>
    <updated>2019-10-30T08:13:41.556Z</updated>
    
    <content type="html"><![CDATA[<p>POP3，全名为“Post Office Protocol - Version 3”，即“邮局协议版本3”。是TCP/IP协议族中的一员，由RFC1939 定义。本协议主要用于支持使用客户端远程管理在服务器上的电子邮件。提供了SSL加密的POP3协议被称为POP3S。<br>POP 协议支持“离线”邮件处理。其具体过程是：邮件发送到服务器上，电子邮件客户端调用邮件客户机程序以连接服务器，并下载所有未阅读的电子邮件。这种离线访问模式是一种存储转发服务，将邮件从邮件服务器端送到个人终端机器上，一般是PC机或 MAC。一旦邮件发送到 PC 机或MAC上，邮件服务器上的邮件将会被删除。但目前的POP3邮件服务器大都可以“只下载邮件，服务器端并不删除”，也就是改进的POP3协议。</p><a id="more"></a><p>POP3协议默认端口：110<br>POP3协议默认传输协议：TCP<br>POP3协议适用的构架结构：C/S<br>POP3协议的访问模式：离线访问    </p><p>POP3命令码</p><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>USER [username]</td><td>处理用户名</td></tr><tr><td>PASS [password]</td><td>处理用户密码</td></tr><tr><td>APOP [Name,Digest]</td><td>认可Digest是MD5消息摘要</td></tr><tr><td>STAT</td><td>处理请求服务器发回关于邮箱的统计资料，如邮件总数和总字节数</td></tr><tr><td>UIDL [Msg#]</td><td>处理返回邮件的唯一标识符，POP3会话的每个标识符都将是唯一的</td></tr><tr><td>LIST [Msg#]</td><td>处理返回邮件数量和每个邮件的大小</td></tr><tr><td>RETR [Msg#]</td><td>处理返回由参数标识的邮件的全部文本</td></tr><tr><td>DELE [Msg#]</td><td>处理服务器将由参数标识的邮件标记为删除，由quit命令执行</td></tr><tr><td>RSET</td><td>处理服务器将重置所有标记为删除的邮件，用于撤消DELE命令</td></tr><tr><td>TOP [Msg# n]</td><td>处理服务器将返回由参数标识的邮件前n行内容，n必须是正整数</td></tr><tr><td>NOOP</td><td>处理服务器返回一个肯定的响应</td></tr><tr><td>QUIT</td><td>终止会话</td></tr></tbody></table><p>代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line">package POP3;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"><span class="keyword">import</span> javax.mail.BodyPart;</span><br><span class="line"><span class="keyword">import</span> javax.mail.Folder;</span><br><span class="line"><span class="keyword">import</span> javax.mail.Message;</span><br><span class="line"><span class="keyword">import</span> javax.mail.MessagingException;</span><br><span class="line"><span class="keyword">import</span> javax.mail.Multipart;</span><br><span class="line"><span class="keyword">import</span> javax.mail.Part;</span><br><span class="line"><span class="keyword">import</span> javax.mail.Session;</span><br><span class="line"><span class="keyword">import</span> javax.mail.Store;</span><br><span class="line"><span class="keyword">import</span> javax.mail.internet.MimeMessage;</span><br><span class="line"></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">POP3</span> </span>&#123;</span><br><span class="line">public <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="built_in">String</span>[] args) &#123;</span><br><span class="line"><span class="built_in">String</span> protocol = <span class="string">"pop3"</span>;<span class="comment">// 使用pop3协议</span></span><br><span class="line"><span class="built_in">String</span> host = <span class="string">"pop.sina.cn"</span>;<span class="comment">// 163邮箱的pop3服务器</span></span><br><span class="line">int port = <span class="number">110</span>;<span class="comment">// 端口</span></span><br><span class="line"><span class="built_in">String</span> username = <span class="string">"your_name@sina.cn"</span>;<span class="comment">// 用户名</span></span><br><span class="line"><span class="built_in">String</span> password = <span class="string">"your_password"</span>;<span class="comment">// 密码</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Properties是一个属性对象，用来创建Session对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Properties props = <span class="keyword">new</span> Properties();</span><br><span class="line">props.put(<span class="string">"mail.pop3.host"</span>, host);</span><br><span class="line">props.put(<span class="string">"mail.pop3.port"</span>, port);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Session类定义了一个基本的邮件对话。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Session session = Session.getDefaultInstance(props);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Store类实现特定邮件协议上的读、写、监视、查找等操作。 通过Store类可以访问Folder类。</span></span><br><span class="line"><span class="comment"> * Folder类用于分级组织邮件，并提供照Message格式访问email的能力。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Store store = <span class="literal">null</span>;</span><br><span class="line">Folder folder = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">store = session.getStore(protocol);</span><br><span class="line">store.connect(username, password);</span><br><span class="line"></span><br><span class="line">folder = store.getFolder(<span class="string">"INBOX"</span>);</span><br><span class="line">folder.open(Folder.READ_ONLY);<span class="comment">// 在这一步，收件箱所有邮件将被下载到本地</span></span><br><span class="line"><span class="comment">// int size = folder.getMessageCount();// 获取邮件数目</span></span><br><span class="line">Message[] messages = folder.getMessages();</span><br><span class="line"><span class="comment">// Message message = folder.getMessage(size);// 取得最新的那个邮件</span></span><br><span class="line"><span class="comment">// 解析邮件内容</span></span><br><span class="line"><span class="keyword">for</span> (int i = <span class="number">0</span>, count = <span class="number">2</span>; i &lt; count; i++) &#123;</span><br><span class="line">MimeMessage msg = (MimeMessage) messages[i];</span><br><span class="line">parseMessage(msg);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (folder != <span class="literal">null</span>) &#123;</span><br><span class="line">folder.close(<span class="literal">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (store != <span class="literal">null</span>) &#123;</span><br><span class="line">store.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"接收完毕！"</span>);</span><br><span class="line">&#125;</span><br><span class="line">public <span class="keyword">static</span> <span class="keyword">void</span> getMailTextContent(Part part, StringBuffer content)</span><br><span class="line">throws MessagingException, IOException &#123;</span><br><span class="line"><span class="comment">// 如果是文本类型的附件，通过getContent方法可以取到文本内容，但这不是我们需要的结果，所以在这里要做判断</span></span><br><span class="line">boolean isContainTextAttach = part.getContentType().indexOf(<span class="string">"name"</span>) &gt; <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (part.isMimeType(<span class="string">"text/*"</span>) &amp;&amp; !isContainTextAttach) &#123;</span><br><span class="line">content.append(part.getContent().toString());</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (part.isMimeType(<span class="string">"message/rfc822"</span>)) &#123;</span><br><span class="line">getMailTextContent((Part) part.getContent(), content);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (part.isMimeType(<span class="string">"multipart/*"</span>)) &#123;</span><br><span class="line">Multipart multipart = (Multipart) part.getContent();</span><br><span class="line">int partCount = multipart.getCount();</span><br><span class="line"><span class="keyword">for</span> (int i = <span class="number">0</span>; i &lt; partCount; i++) &#123;</span><br><span class="line">BodyPart bodyPart = multipart.getBodyPart(i);</span><br><span class="line">getMailTextContent(bodyPart, content);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public <span class="keyword">static</span> <span class="keyword">void</span> parseMessage(MimeMessage msg) throws MessagingException,</span><br><span class="line">IOException &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">System.out.println(<span class="string">"------------------解析第"</span> + msg.getMessageNumber()</span><br><span class="line">+ <span class="string">"封邮件-------------------- "</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">String</span> <span class="keyword">from</span> = msg.getFrom()[<span class="number">0</span>].toString();</span><br><span class="line"><span class="built_in">String</span> subject = msg.getSubject();</span><br><span class="line">java.util.Date date = msg.getSentDate();</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"From: "</span> + <span class="keyword">from</span>);</span><br><span class="line">System.out.println(<span class="string">"Subject: "</span> + subject);</span><br><span class="line">System.out.println(<span class="string">"Date: "</span> + date);</span><br><span class="line">StringBuffer content = <span class="keyword">new</span> StringBuffer(<span class="number">30</span>);</span><br><span class="line">getMailTextContent(msg, content);</span><br><span class="line">System.out.println(<span class="string">"邮件正文："</span></span><br><span class="line">+ (content.length() &gt; <span class="number">100</span> ? content.substring(<span class="number">0</span>, <span class="number">100</span>) + <span class="string">"..."</span></span><br><span class="line">: content));</span><br><span class="line">System.out.println(<span class="string">"------------------第"</span> + msg.getMessageNumber()</span><br><span class="line">+ <span class="string">"封邮件解析结束-------------------- "</span>);</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参数分析</p><p>CAPA：开始与 POP3 Server 送出的第一个指令，用于取得此服务器的功能选项清单<br>Capability list follows 返回指令<br>USER：与 POP3 Server 送出帐户名<br>PASS：与 POP3 Server 送出密码<br>STAT：取得服务器上本帐户存在的信件数量<br>NOOP：服务器返回一个肯定的响应，用于测试连接是否成功<br>TOP n m：取得第n封信件前m行的内容<br>TCP Spurious Retransmission：TCP虚假重传。<br>当抓到2次同一包数据时，wireshark判断网络发生了重传，同时，wireshark抓到初传包的反馈ack，因此wireshark判断初传包实际并没有丢失，因此称为虚假重传。<br>IMF： Internet Message Format<br>RETR n：取得第n封信件完整内容<br>octet = 1 Byte =  8 bits<br>QUIT 告知 POP3 服务器即将说再见．    </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;POP3，全名为“Post Office Protocol - Version 3”，即“邮局协议版本3”。是TCP/IP协议族中的一员，由RFC1939 定义。本协议主要用于支持使用客户端远程管理在服务器上的电子邮件。提供了SSL加密的POP3协议被称为POP3S。&lt;br&gt;POP 协议支持“离线”邮件处理。其具体过程是：邮件发送到服务器上，电子邮件客户端调用邮件客户机程序以连接服务器，并下载所有未阅读的电子邮件。这种离线访问模式是一种存储转发服务，将邮件从邮件服务器端送到个人终端机器上，一般是PC机或 MAC。一旦邮件发送到 PC 机或MAC上，邮件服务器上的邮件将会被删除。但目前的POP3邮件服务器大都可以“只下载邮件，服务器端并不删除”，也就是改进的POP3协议。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="电子邮件" scheme="blog.zhengxiangling.com/tags/%E7%94%B5%E5%AD%90%E9%82%AE%E4%BB%B6/"/>
    
      <category term="Java" scheme="blog.zhengxiangling.com/tags/Java/"/>
    
      <category term="POP3" scheme="blog.zhengxiangling.com/tags/POP3/"/>
    
  </entry>
  
  <entry>
    <title>电子邮件的实现之 SMTP（Java版）</title>
    <link href="blog.zhengxiangling.com/2017/11/22/%E7%94%B5%E5%AD%90%E9%82%AE%E4%BB%B6%E7%9A%84%E5%AE%9E%E7%8E%B0%E4%B9%8B-SMTP/"/>
    <id>blog.zhengxiangling.com/2017/11/22/电子邮件的实现之-SMTP/</id>
    <published>2017-11-22T15:24:00.000Z</published>
    <updated>2019-10-30T08:13:41.556Z</updated>
    
    <content type="html"><![CDATA[<p>1.SMTP协议简介</p><p>SMTP（Simple Mail Transfer Protocol）即简单邮件传输协议，目标是向用户提供高效、可靠的邮件传输。它的一个重要特点是它能够在传送中接力传送邮件，即邮件可以通过不同网络上的主机接力式传送。通常它工作在两种情况下：一是邮件从客户机传输到服务器；二是从某一个服务器传输到另一个服务器。SMTP 是一个请求/响应协议，它监听 25 号端口，用于接收用户的 Mail 请求，并与远端 Mail 服务器建立 SMTP 连接。</p><a id="more"></a><p>2.SMTP协议工作机制</p><p>SMTP通常有两种工作模式。发送SMTP和接收SMTP。具体工作方式为：发送SMTP在接收到用户的邮件请求后，判断此邮件是否为本地邮件，若是直接投送到用户的邮箱，否则向DNS查询远端邮件服务器的MX记录，并建立与远端接收SMTP之间的一个双向传送通道，此后SMTP命令由发送SMTP发出，由接收SMTP接收，而应答则反方向传送。一旦传送通道建立，SMTP发送者发送MAIL命令指明邮件发送者。如果SMTP接收者可以接收邮件则返回OK应答。SMTP发送者再发出RCPT命令确认邮件是否接收到。如果SMTP接收者接收，则返回OK应答；如果不能接收到，则发出拒绝接收应答（但不中止整个邮件操作），双方将如此反复多次。当接收者收到全部邮件后会接收到特别的序列，入伏哦接收者成功处理了邮件，则返回OK应答。</p><p>3.SMTP的连接和发送过程<br>（a）建立TCP连接<br>（b）客户端发送HELO命令以标识发件人自己的身份，然后客户端发送MAIL命令；服务器端正希望以OK作为响应，表明准备接收。<br>（c）客户端发送RCPT命令，以标识该电子邮件的计划接收人，可以有多个RCPT行；服务器端则表示是否愿意为收件人接收邮件<br>（d）协商结束，发送邮件，用命令DATA发送<br>（e）以.表示结束输入内容一起发送出去<br>（f）结束此次发送，用QUIT命令退出。</p><p>4.准备工作<br>1）注册新浪邮箱<br>2）准备包文件<br>activation-1.1.jar 以及 javax.mail-1.4.4.jar<br>下载链接<br><a href="https://cdn.zhengxiangling.com/activation-1.1.jar" target="_blank" rel="noopener">activation-1.1.jar</a><br><a href="https://cdn.zhengxiangling.com/activation-1.1.jar" target="_blank" rel="noopener">javax.mail-1.4.4.jar</a><br>3)导入包文件    </p><p>在项目中新建<code>lib</code>文件夹，将两个包文件放入文件夹中<br><img src="https://cdn.zhengxiangling.com/17-11-23/10495710.jpg" alt=""></p><p>右击包文件，选择 Build Path -&gt; Configure Build Path，然后出现下图<br><img src="https://cdn.zhengxiangling.com/17-11-23/6832403.jpg" alt=""><br>点击 Libralies -&gt; Add JARS -&gt; 选中<code>lib</code>文件夹中的 <code>.jar</code>文件，重复步骤导入两个包文件</p><p>5.代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">package SMTP;</span><br><span class="line"><span class="keyword">import</span> javax.mail.Address;</span><br><span class="line"><span class="keyword">import</span> javax.mail.Message;</span><br><span class="line"><span class="keyword">import</span> javax.mail.MessagingException;</span><br><span class="line"><span class="keyword">import</span> javax.mail.Session;</span><br><span class="line"><span class="keyword">import</span> javax.mail.Transport;</span><br><span class="line"><span class="keyword">import</span> javax.mail.internet.InternetAddress;</span><br><span class="line"><span class="keyword">import</span> javax.mail.internet.MimeMessage;</span><br><span class="line"><span class="keyword">import</span> com.sun.mail.util.MailSSLSocketFactory;</span><br><span class="line"><span class="keyword">import</span> java.security.GeneralSecurityException;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">SMTP</span> </span>&#123;  </span><br><span class="line">public <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="built_in">String</span>[] args) throws MessagingException,</span><br><span class="line">GeneralSecurityException &#123;</span><br><span class="line">Properties props = <span class="keyword">new</span> Properties();</span><br><span class="line"><span class="comment">// 开启debug调试</span></span><br><span class="line">props.setProperty(<span class="string">"mail.debug"</span>, <span class="string">"true"</span>);</span><br><span class="line"><span class="comment">// 发送服务器需要身份验证</span></span><br><span class="line">props.setProperty(<span class="string">"mail.smtp.auth"</span>, <span class="string">"true"</span>);</span><br><span class="line"><span class="comment">// 设置邮件服务器主机名</span></span><br><span class="line">props.setProperty(<span class="string">"mail.host"</span>, <span class="string">"smtp.sina.cn"</span>);</span><br><span class="line"><span class="comment">// 发送邮件协议名称</span></span><br><span class="line">props.setProperty(<span class="string">"mail.transport.protocol"</span>, <span class="string">"smtp"</span>);</span><br><span class="line">Session session = Session.getInstance(props);</span><br><span class="line">Message msg = <span class="keyword">new</span> MimeMessage(session);</span><br><span class="line">msg.setSubject(<span class="string">"STMP 测试"</span>);</span><br><span class="line">StringBuilder builder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"></span><br><span class="line">builder.append(<span class="string">"My name is Elijah"</span>);</span><br><span class="line">msg.setText(builder.toString());</span><br><span class="line">msg.setFrom(<span class="keyword">new</span> InternetAddress(<span class="string">"your_number@sina.cn"</span>));</span><br><span class="line">Transport transport = session.getTransport();</span><br><span class="line">transport.connect(<span class="string">"smtp.sina.cn"</span>, <span class="string">"xxx@sina.cn"</span>, <span class="string">"your_password"</span>);</span><br><span class="line">transport.sendMessage(msg, <span class="keyword">new</span> Address[] &#123; <span class="keyword">new</span> InternetAddress(<span class="string">"xxx@sina.cn"</span>) &#125;);</span><br><span class="line">transport.close();</span><br><span class="line">&#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参数分析</p><p> SMTP的响应，它的一般形式是：XXX  Readable Illustration。XXX是三位十进制数；Readable Illustration是可读的解释说明，用来表明命令是否成功等。XXX具有如下的规律：以2开头的表示成功，以4和5开头的表示失败，以3开头的表示未完成（进行中）</p><p> C: client S: server</p><p>域服务器准备好了，之后的为域服务器自动返回的信息</p><p>HELO 客户端为标识自己的身份而发送的命令（通常带域名）</p><p>250 请求动作完成</p><p>AUTH LOGIN 请求认证</p><p>等待用户输入验证信息</p><p>dxNlcm5hbWU6  服务器的响应——经过base64编码了的“Username”= </p><p>334 UGFzc3dvcmQ6  经过BASE64编码了的”Password:”= </p><p>235 auth successfully 认证成功   </p><p>MAIL FROM: 发送者邮箱</p><p>RCPT TO:  接收者邮箱 </p><p>DATA  请求发送数据  </p><p>开始邮件输入，以.结束</p><p><CR><LF> 回车 + 换行</p><p>QUIT 终止会话</p><p>服务器关闭</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;1.SMTP协议简介&lt;/p&gt;
&lt;p&gt;SMTP（Simple Mail Transfer Protocol）即简单邮件传输协议，目标是向用户提供高效、可靠的邮件传输。它的一个重要特点是它能够在传送中接力传送邮件，即邮件可以通过不同网络上的主机接力式传送。通常它工作在两种情况下：一是邮件从客户机传输到服务器；二是从某一个服务器传输到另一个服务器。SMTP 是一个请求/响应协议，它监听 25 号端口，用于接收用户的 Mail 请求，并与远端 Mail 服务器建立 SMTP 连接。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="电子邮件" scheme="blog.zhengxiangling.com/tags/%E7%94%B5%E5%AD%90%E9%82%AE%E4%BB%B6/"/>
    
      <category term="SMTP" scheme="blog.zhengxiangling.com/tags/SMTP/"/>
    
      <category term="JAVA" scheme="blog.zhengxiangling.com/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>使用uWSGI + nginx 提高性能，配置 uWSGI 使用 .ini 文件去运行项目（基本配置）</title>
    <link href="blog.zhengxiangling.com/2017/10/27/%E4%BD%BF%E7%94%A8uWSGI-nginx-%E6%8F%90%E9%AB%98%E6%80%A7%E8%83%BD%EF%BC%8C%E9%85%8D%E7%BD%AE-uWSGI-%E4%BD%BF%E7%94%A8-ini-%E6%96%87%E4%BB%B6%E5%8E%BB%E8%BF%90%E8%A1%8C%E9%A1%B9%E7%9B%AE%EF%BC%88%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE%EF%BC%89/"/>
    <id>blog.zhengxiangling.com/2017/10/27/使用uWSGI-nginx-提高性能，配置-uWSGI-使用-ini-文件去运行项目（基本配置）/</id>
    <published>2017-10-27T06:16:00.000Z</published>
    <updated>2019-10-30T08:13:41.546Z</updated>
    
    <content type="html"><![CDATA[<p>快速配置 uWSGI + nginx 运行Django 项目</p><a id="more"></a><p>1.新建 Django 项目</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">django-admin startproject site_uwsgi</span><br><span class="line"><span class="built_in">cd</span> site_uwsgi</span><br></pre></td></tr></table></figure><p>2.对网站进行 nginx 配置</p><p>目录中新建 <code>site_uwsgi.conf</code> 文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen  <span class="number">8001</span>;</span><br><span class="line">    server_name your_server_name.com;</span><br><span class="line">    client_max_body_size <span class="number">50</span>m;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    location /<span class="keyword">static</span>/ &#123;</span><br><span class="line">        alias /data/www/vhosts/site_uwsgi/<span class="keyword">static</span>/;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">        uwsgi_pass  web;</span><br><span class="line">        include /data/www/vhosts/site_uwsgi/uwsgi_params;</span><br><span class="line">    &#125;</span><br><span class="line">    access_log /<span class="keyword">var</span>/log/nginx/site_uwsgi.access_log;</span><br><span class="line">    error_log /<span class="keyword">var</span>/log/nginx/site_uwsgi.error_log;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">upstream web &#123;</span><br><span class="line">    server unix:<span class="comment">///data/www/vhosts/site_uwsgi/socket.sock;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>连接进 <code>/etc/nginx/sites-enabled/</code>中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ln -s /data/www/vhosts/site_uwsgi/site_uwsgi.conf /etc/nginx/sites-enabled/</span><br></pre></td></tr></table></figure><p>3.编辑 <code>site_uwsgi/settings.py</code> 文件及收集静态资源</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ALLOWED_HOSTS = ['...'] # 有服务器的话需增加服务器ip</span><br><span class="line">STATIC_ROOT = os.path.join(BASE_DIR, <span class="string">'static/'</span>)</span><br></pre></td></tr></table></figure><p>收集静态资源</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py collectstatic</span><br></pre></td></tr></table></figure><p>4.目录中新建 <code>uwsgi_params</code> 文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">uwsgi_param  QUERY_STRING       $query_string;</span><br><span class="line">uwsgi_param  REQUEST_METHOD     $request_method;</span><br><span class="line">uwsgi_param  CONTENT_TYPE       $content_type;</span><br><span class="line">uwsgi_param  CONTENT_LENGTH     $content_length;</span><br><span class="line"></span><br><span class="line">uwsgi_param  REQUEST_URI        $request_uri;</span><br><span class="line">uwsgi_param  PATH_INFO          $document_uri;</span><br><span class="line">uwsgi_param  DOCUMENT_ROOT      $document_root;</span><br><span class="line">uwsgi_param  SERVER_PROTOCOL    $server_protocol;</span><br><span class="line">uwsgi_param  REQUEST_SCHEME     $scheme;</span><br><span class="line">uwsgi_param  HTTPS              $https if_not_empty;</span><br><span class="line"></span><br><span class="line">uwsgi_param  REMOTE_ADDR        $remote_addr;</span><br><span class="line">uwsgi_param  REMOTE_PORT        $remote_port;</span><br><span class="line">uwsgi_param  SERVER_PORT        $server_port;</span><br><span class="line">uwsgi_param  SERVER_NAME        $server_name;</span><br></pre></td></tr></table></figure><p>5.修改 <code>/etc/nginx/nginx.conf</code> 的 <code>user</code> 为 <code>root</code> 用户</p><p>重启 nginx </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /etc/init.d/nginx restart</span><br></pre></td></tr></table></figure><p>6.配置 uWSGI 使用 .ini 文件去运行项目<br><code>site_uwsgi.ini</code></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"># site_uwsgi.ini file</span><br><span class="line">[uwsgi]</span><br><span class="line"># Django-related settings</span><br><span class="line"># the base directory (full path)</span><br><span class="line">chdir           = <span class="regexp">/data/</span>www/vhosts/site_uwsgi/</span><br><span class="line"># Django's wsgi file</span><br><span class="line"><span class="built_in">module</span>          = site_uwsgi.wsgi</span><br><span class="line"># the virtualenv (full path)</span><br><span class="line"># process-related settings</span><br><span class="line"># master</span><br><span class="line">master          = <span class="literal">true</span></span><br><span class="line"># maximum number of worker processes</span><br><span class="line">processes       = <span class="number">30</span></span><br><span class="line"># the socket (use the full path to be safe</span><br><span class="line">socket          = <span class="regexp">/data/</span>www/vhosts/site_uwsgi/socket.sock</span><br><span class="line"># ... with appropriate permissions - may be needed</span><br><span class="line">chmod-socket    = <span class="number">664</span></span><br><span class="line"># clear environment on exit</span><br><span class="line">vacuum          = <span class="literal">true</span></span><br><span class="line"># pidfile</span><br><span class="line">pidfile         = <span class="regexp">/data/</span>www/vhosts/site_uwsgi/site_uwsgi.pid</span><br><span class="line"># logger</span><br><span class="line"># daemonize       = /data/www/vhosts/site_uwsgi/access.log</span><br></pre></td></tr></table></figure><p>7.后台挂载 uwsgi:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup uwsgi --ini mysite_uwsgi.ini &amp;</span><br></pre></td></tr></table></figure><p>输入 <code>ip:8001</code>, <code>done</code></p><p><img src="https://cdn.zhengxiangling.com/17-10-27/97231926.jpg" alt=""></p><p>8.挂载之后，每次修改models.py，需要 reload uwsgi，和重启数据库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">uwsgi --reload yxpp.pid</span><br><span class="line">service mysql restart</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;快速配置 uWSGI + nginx 运行Django 项目&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="服务器" scheme="blog.zhengxiangling.com/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
      <category term="uWSGI" scheme="blog.zhengxiangling.com/tags/uWSGI/"/>
    
      <category term="nginx" scheme="blog.zhengxiangling.com/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>使用uWSGI + nginx 提高性能，部署Django项目（入门）</title>
    <link href="blog.zhengxiangling.com/2017/10/26/%E4%BD%BF%E7%94%A8uWSGI-nginx%E6%8F%90%E9%AB%98%E6%80%A7%E8%83%BD%EF%BC%8C%E9%83%A8%E7%BD%B2Django%E9%A1%B9%E7%9B%AE%EF%BC%88%E5%85%A5%E9%97%A8%EF%BC%89/"/>
    <id>blog.zhengxiangling.com/2017/10/26/使用uWSGI-nginx提高性能，部署Django项目（入门）/</id>
    <published>2017-10-26T13:03:00.000Z</published>
    <updated>2019-10-30T08:13:41.556Z</updated>
    
    <content type="html"><![CDATA[<h5 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h5><p>Web服务器是面向外部世界的。它可以直接从文件系统中提供（HTML, images, CSS 等）服务文件。然而，它不能直接和Django应用进行通信；它需要可以运行应用程序的东西，从web客户端（如浏览器）中请求它和返回响应。</p><p>Web服务网关接口（Web Server Gateway Interface） - WSGI - 扮演着这个角色。WSGI 是基于Python的一个标准。</p><p>uWSGI 是一个Web服务器，实现了 WSGI、uwsgi、http等协议。</p><a id="more"></a><h5 id="使用-uWSGI-前的准备工作"><a href="#使用-uWSGI-前的准备工作" class="headerlink" title="使用 uWSGI 前的准备工作"></a>使用 uWSGI 前的准备工作</h5><p>具体代码基于 Linux(Ubuntu)，window 和 mac 的环境安装方法和引用的文件路径可能会存在偏差。</p><h6 id="virtualenv（自选）"><a href="#virtualenv（自选）" class="headerlink" title="virtualenv（自选）"></a>virtualenv（自选）</h6><p>Python的虚拟环境，可以切换不同python的版本。这里不介绍virtualenv的安装。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">virtualenv uwsgi-tutorial</span><br><span class="line"><span class="built_in">cd</span> uwsgi-tutorial</span><br><span class="line"><span class="built_in">source</span> bin/activate</span><br></pre></td></tr></table></figure><h6 id="Django"><a href="#Django" class="headerlink" title="Django"></a>Django</h6><p>安装 Django</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pip install Django</span><br><span class="line">django-admin.py startproject mysite</span><br><span class="line"><span class="built_in">cd</span> mysite</span><br></pre></td></tr></table></figure><h5 id="uWSGI-基本安装和配置"><a href="#uWSGI-基本安装和配置" class="headerlink" title="uWSGI 基本安装和配置"></a>uWSGI 基本安装和配置</h5><h6 id="安装-uWSGI"><a href="#安装-uWSGI" class="headerlink" title="安装 uWSGI"></a>安装 uWSGI</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install uwsgi</span><br></pre></td></tr></table></figure><p>当然还有其他的方法来安装uWSGI，不过<code>pip</code>来安装是最好的安装方法之一。</p><h6 id="基本测试"><a href="#基本测试" class="headerlink" title="基本测试"></a>基本测试</h6><p>创建 <code>test.py</code> 文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># test.py</span><br><span class="line">def application(env, start_response):</span><br><span class="line">    start_response(&apos;200 OK&apos;, [(&apos;Content-Type&apos;,&apos;text/html&apos;)])</span><br><span class="line">    return [b&quot;Hello World&quot;] # python3</span><br><span class="line">    #return [&quot;Hello World&quot;] # python2</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>   Python3 返回字符串时要求用bytes()</p></blockquote></blockquote><p>运行 uWSGI:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uwsgi --http :8000 --wsgi-file test.py</span><br></pre></td></tr></table></figure><p>选项参数说明：</p><table><thead><tr><th>参数</th><th align="center">解释</th></tr></thead><tbody><tr><td>http:8000</td><td align="center">使用http协议，端口8000</td></tr><tr><td>wsgi-file test.py</td><td align="center">加载指定的文件，test.py</td></tr></tbody></table><h6 id="测试你的Django项目"><a href="#测试你的Django项目" class="headerlink" title="测试你的Django项目"></a>测试你的Django项目</h6><p>现在我们用 uWSGI 去运行Django网站。</p><p>先测试你的<code>mysite</code>项目已经可以运行:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py runserver 0.0.0.0:8000</span><br></pre></td></tr></table></figure><p>如果已经可以运行，换用uWSGI来运行:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uwsgi --http :8000 --module mysite.wsgi</span><br></pre></td></tr></table></figure><p><code>module mysite.wsgi</code>： 加载指定的wsgi模块</p><p>如果能够成功进行访问，说明uWSGI已经能够对Django应用服务。</p><h5 id="nginx-基本配置"><a href="#nginx-基本配置" class="headerlink" title="nginx 基本配置"></a>nginx 基本配置</h5><h6 id="安装-nginx"><a href="#安装-nginx" class="headerlink" title="安装 nginx"></a>安装 nginx</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install nginx</span><br><span class="line">sudo /etc/init.d/nginx start    <span class="comment"># start nginx</span></span><br></pre></td></tr></table></figure><h6 id="对网站进行-nginx-配置"><a href="#对网站进行-nginx-配置" class="headerlink" title="对网站进行 nginx 配置"></a>对网站进行 nginx 配置</h6><p>现在需要 <code>uwsgi_params</code>文件，在 nginx 目录中 uWSGI分配时会用来。可以从 <a href="https://github.com/nginx/nginx/blob/master/conf/uwsgi_params" target="_blank" rel="noopener">https://github.com/nginx/nginx/blob/master/conf/uwsgi_params</a> 中复制此文件放在项目的目录中。然后在 nginx 中将会使用到它。</p><p>现在创建一个 <code>mysite_nginx.conf</code> 文件，将下列信息填入：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"># mysite_nginx.conf</span><br><span class="line"></span><br><span class="line"># the upstream component nginx needs to connect to</span><br><span class="line">upstream django &#123;</span><br><span class="line">    #server unix:///data/www/vhosts/mysite/socket.sock; #for a file socket</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># configuration of the server</span><br><span class="line">server &#123;</span><br><span class="line">    # the port your site will be served on</span><br><span class="line">    listen      <span class="number">8000</span>;</span><br><span class="line">    # the domain name it will serve for</span><br><span class="line">    server_name your_server_name.com; # substitute your machine's IP address or FQDN</span><br><span class="line">    charset     utf<span class="number">-8</span>;</span><br><span class="line"></span><br><span class="line">    # max upload size</span><br><span class="line">    client_max_body_size 75M;   # adjust to taste</span><br><span class="line"></span><br><span class="line">    # Django media</span><br><span class="line">    location /media  &#123;</span><br><span class="line">        alias /data/www/vhosts/mysite/media;  # your Django project's media files - amend as required</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location /<span class="keyword">static</span> &#123;</span><br><span class="line">        alias /data/www/vhosts/mysite/static; # your Django project's static files - amend as required</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    # Finally, send all non-media requests to the Django server.</span><br><span class="line">    location / &#123;</span><br><span class="line">        uwsgi_pass  django;</span><br><span class="line">        include     /data/www/vhosts/mysite/uwsgi_params; # the uwsgi_params file you installed</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个配置文件告诉nginx去服务从系统文件来的媒体和静态文件，和处理来自Django干预的请求。对于大规模部署的项目，需要很好的考虑让一个服务去处理静态/媒体资源，另一个去处理Django的应用，但是现在这个配置已经够用了。</p><p>然后用链接符号<code>ln</code>将该文件放到<code>/etc/nginx/sites-enabled</code>中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ln -s /data/www/vhosts/mysite/mysite_nginx.conf /etc/nginx/sites-enabled/</span><br></pre></td></tr></table></figure><h6 id="部署静态文件"><a href="#部署静态文件" class="headerlink" title="部署静态文件"></a>部署静态文件</h6><p>在运行 nginx 之前，你需要手机 Django 的静态文件放到静态文件夹中。<br>编辑 <code>mysite/settings.py</code> 增加：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">STATIC_ROOT = os.path.join(BASE_DIR, <span class="string">"static/"</span>)</span><br></pre></td></tr></table></figure><p>然后执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py collectstatic</span><br></pre></td></tr></table></figure><h6 id="nginx-基本测试"><a href="#nginx-基本测试" class="headerlink" title="nginx 基本测试"></a>nginx 基本测试</h6><p>重启 nginx：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /etc/init.d/nginx restart</span><br></pre></td></tr></table></figure><p>在<code>mysite</code>项目新建<code>media</code>文件夹，在其中放入一张<code>media.png</code>图片，访问 <a href="http://0.0.0.0:8000/media/media.png" target="_blank" rel="noopener">http://0.0.0.0:8000/media/media.png</a> ，如果成功访问，说明 nginx 已成功对文件进行服务。</p><p>如果访问失败，看错误日志然后做相应的修改，然后重启 nginx。</p><h5 id="使用-Unix-sockets-来代替端口"><a href="#使用-Unix-sockets-来代替端口" class="headerlink" title="使用 Unix sockets 来代替端口"></a>使用 Unix sockets 来代替端口</h5><p>到目前为止，我们已经使用了TCP端口的套接字（socket），因为它比较的简单，但实际上使用 Unix socket 会更好 - 开销较少。</p><p>编辑 <code>mysite_nginx.conf</code><br>取消下列注释</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">server unix:///data/www/vhosts/mysite/mysite.sock; # for a file socket</span><br></pre></td></tr></table></figure><p>然后重启 nginx<br>然后重新运行 uWSGI：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uwsgi --socket mysite.sock --wsgi-file test.py</span><br></pre></td></tr></table></figure><p>这次是使用 <code>socket</code>选项去告诉配置 uWSGI 。</p><p>如果启动失败，检查 nginx 错误日志 （/var/log/nginx/error.log）</p><p>如果出现<br><code>connect() to unix:///data/www/vhosts/mysite/mysite.sock failed (13: Permission denied)</code><br>修改 <code>/etc/nginx/nginx.conf</code>的<code>user</code>为<code>root</code>用户</p><h5 id="配置-uWSGI-使用-ini-文件去运行项目"><a href="#配置-uWSGI-使用-ini-文件去运行项目" class="headerlink" title="配置 uWSGI 使用 .ini 文件去运行项目"></a>配置 uWSGI 使用 .ini 文件去运行项目</h5><p>创建 <code>mysite_uwsgi.ini</code> 文件：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"># mysite_uwsgi.ini file</span><br><span class="line">[uwsgi]</span><br><span class="line"></span><br><span class="line"># Django-related settings</span><br><span class="line"># the base directory (full path)</span><br><span class="line">chdir           = <span class="regexp">/data/</span>www/vhosts/mysite/</span><br><span class="line"># Django's wsgi file</span><br><span class="line"><span class="built_in">module</span>          = mysite.wsgi</span><br><span class="line"># the virtualenv (full path)</span><br><span class="line"></span><br><span class="line"># process-related settings</span><br><span class="line"># master</span><br><span class="line">master          = <span class="literal">true</span></span><br><span class="line"># maximum number of worker processes</span><br><span class="line">processes       = <span class="number">30</span></span><br><span class="line"># the socket (use the full path to be safe</span><br><span class="line">socket          = <span class="regexp">/data/</span>www/vhosts/mysite/socket.sock</span><br><span class="line"></span><br><span class="line"># ... with appropriate permissions - may be needed</span><br><span class="line">chmod-socket    = <span class="number">664</span></span><br><span class="line"># clear environment on exit</span><br><span class="line">vacuum          = <span class="literal">true</span></span><br><span class="line"># pidfile</span><br><span class="line">pidfile         = <span class="regexp">/data/</span>www/vhosts/mysite/mysite.pid</span><br><span class="line"># logger</span><br><span class="line"># daemonize       = /data/www/vhosts/mysite/access.log</span><br></pre></td></tr></table></figure><p>然后使用该文件运行 uswgi：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uwsgi --ini mysite_uwsgi.ini <span class="comment"># the --ini option is used to specify a file</span></span><br></pre></td></tr></table></figure><blockquote><blockquote><p>参考文献：Setting up Django and your web server with uWSGI and nginx<br><a href="http://uwsgi-docs.readthedocs.io/en/latest/tutorials/Django_and_nginx.html#basic-uwsgi-installation-and-configuration" target="_blank" rel="noopener">http://uwsgi-docs.readthedocs.io/en/latest/tutorials/Django_and_nginx.html#basic-uwsgi-installation-and-configuration</a></p></blockquote></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h5&gt;&lt;p&gt;Web服务器是面向外部世界的。它可以直接从文件系统中提供（HTML, images, CSS 等）服务文件。然而，它不能直接和Django应用进行通信；它需要可以运行应用程序的东西，从web客户端（如浏览器）中请求它和返回响应。&lt;/p&gt;
&lt;p&gt;Web服务网关接口（Web Server Gateway Interface） - WSGI - 扮演着这个角色。WSGI 是基于Python的一个标准。&lt;/p&gt;
&lt;p&gt;uWSGI 是一个Web服务器，实现了 WSGI、uwsgi、http等协议。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Django" scheme="blog.zhengxiangling.com/tags/Django/"/>
    
      <category term="nginx" scheme="blog.zhengxiangling.com/tags/nginx/"/>
    
      <category term="性能" scheme="blog.zhengxiangling.com/tags/%E6%80%A7%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title>Vue2.X Router 的使用</title>
    <link href="blog.zhengxiangling.com/2017/10/14/Vue2-X-Router-%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>blog.zhengxiangling.com/2017/10/14/Vue2-X-Router-的使用/</id>
    <published>2017-10-14T02:23:00.000Z</published>
    <updated>2019-10-30T08:13:41.546Z</updated>
    
    <content type="html"><![CDATA[<p>用 Vue.js + vue-router 创建单页应用，是非常简单的。使用 Vue.js ，我们已经可以通过组合组件来组成应用程序，当你要把 vue-router 添加进来，我们需要做的是，将组件(components)映射到路由(routes)，然后告诉 vue-router 在哪里渲染它们。</p><a id="more"></a><h5 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h5><p>默认vue-cli初始化（init）的时候会提示是否选择安装（选择yes），安装就完成了。</p><h5 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h5><h6 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h6><p>vue</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 使用 router-link 组件来导航. --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 通过传入 `to` 属性指定链接. --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;router-link&gt; 默认会被渲染成一个 `&lt;a&gt;` 标签 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/index"</span>&gt;</span>Go to Index<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 路由出口 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 路由匹配到的组件将渲染在这里 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>router/index.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> Router <span class="keyword">from</span> <span class="string">'vue-router'</span></span><br><span class="line"><span class="comment">// import index.vue 页面</span></span><br><span class="line"><span class="keyword">import</span> Index <span class="keyword">from</span> <span class="string">'@/components/index'</span></span><br><span class="line"></span><br><span class="line">Vue.use(Router)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Router(&#123;</span><br><span class="line">  routes: [</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">'/index'</span>,</span><br><span class="line">    name: <span class="string">'index'</span>,</span><br><span class="line">    component: Index</span><br><span class="line">  &#125;]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>这样就会在<code>&lt;router-link to=&quot;/index&quot;&gt;Go to Index&lt;/router-link&gt;</code>中渲染一个a标签，点击跳转到<code>/index</code>，然后在<code>&lt;router-view&gt;&lt;/router-view&gt;</code>中渲染组件<code>index.vue</code></p><h6 id="配置重定向"><a href="#配置重定向" class="headerlink" title="配置重定向"></a>配置重定向</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Router(&#123;</span><br><span class="line">  routes: [</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">'/'</span>,</span><br><span class="line">    redirect: <span class="string">'/index'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">'/index'</span>,</span><br><span class="line">    name: <span class="string">'index'</span>,</span><br><span class="line">    component: Index</span><br><span class="line">  &#125;]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>这样在访问根路径为<code>/</code>时，会跳转到<code>/index</code>路径，达到访问默认域名时，直接跳转到首页的效果。</p><h6 id="配置点击路由时，路径的默认class类名（linkActiveClass）"><a href="#配置点击路由时，路径的默认class类名（linkActiveClass）" class="headerlink" title="配置点击路由时，路径的默认class类名（linkActiveClass）"></a>配置点击路由时，路径的默认class类名（linkActiveClass）</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Router(&#123;</span><br><span class="line">  routes: [</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">'/'</span>,</span><br><span class="line">    redirect: <span class="string">'/index'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">'/index'</span>,</span><br><span class="line">    name: <span class="string">'index'</span>,</span><br><span class="line">    component: Index</span><br><span class="line">  &#125;]</span><br><span class="line">  ,</span><br><span class="line">  linkActiveClass: <span class="string">'nav-active'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>如果不配置，默认值为<code>router-link-exact-active</code></p><h6 id="配置路由的子路由及动态路由器配"><a href="#配置路由的子路由及动态路由器配" class="headerlink" title="配置路由的子路由及动态路由器配"></a>配置路由的子路由及动态路由器配</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ArticleDetail <span class="keyword">from</span> <span class="string">'@/components/article_detail/article_detail'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Router(&#123;</span><br><span class="line">  routes: [</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">'/'</span>,</span><br><span class="line">    redirect: <span class="string">'/index'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">'/index'</span>,</span><br><span class="line">    name: <span class="string">'index'</span>,</span><br><span class="line">    component: Index,</span><br><span class="line">    children: [</span><br><span class="line">      &#123;</span><br><span class="line">        path: <span class="string">'/index/:id'</span>,</span><br><span class="line">        component: ArticleDetail</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        path: <span class="string">'/search'</span>,</span><br><span class="line">        component: Search</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;]</span><br><span class="line">  ,</span><br><span class="line">  linkActiveClass: <span class="string">'nav-active'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>配置子路由，只需在父路由里添加children属性，然后配置子路由即可，并在子路由的页面添加<code>&lt;router-link&gt;&lt;/router-link&gt;</code>。<br>动态路由<code>/index/:id/</code>的 <code>id</code>值可以用<code>this.$route.params.id</code>取到。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;用 Vue.js + vue-router 创建单页应用，是非常简单的。使用 Vue.js ，我们已经可以通过组合组件来组成应用程序，当你要把 vue-router 添加进来，我们需要做的是，将组件(components)映射到路由(routes)，然后告诉 vue-router 在哪里渲染它们。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Vue" scheme="blog.zhengxiangling.com/tags/Vue/"/>
    
      <category term="vue-router" scheme="blog.zhengxiangling.com/tags/vue-router/"/>
    
  </entry>
  
</feed>
